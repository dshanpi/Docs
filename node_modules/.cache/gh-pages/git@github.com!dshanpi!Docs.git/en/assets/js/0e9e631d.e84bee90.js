"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7993],{92308:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var t=e(85893),i=e(11151);const a={sidebar_position:4},s="\u65e0\u7ebf\u4f20\u5c4f\u663e\u793a",d={id:"T113s3-SdNand/part6/WirelessScreenDisp",title:"\u65e0\u7ebf\u4f20\u5c4f\u663e\u793a",description:"\u5728 T113s3 \u4e0a\u4f7f\u7528\u65e0\u7ebf\u7f51\u5361\u63a5\u6536\u89c6\u9891\u5e76\u4e14\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\u9762\u3002",source:"@site/docs/T113s3-SdNand/part6/04-WirelessScreenDisp.md",sourceDirName:"T113s3-SdNand/part6",slug:"/T113s3-SdNand/part6/WirelessScreenDisp",permalink:"/en/docs/T113s3-SdNand/part6/WirelessScreenDisp",draft:!1,unlisted:!1,editUrl:"https://github.com/100askTeam/linuxboard-docs/tree/main/docs/T113s3-SdNand/part6/04-WirelessScreenDisp.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"t113s3sdnandSidebar",previous:{title:"aic8800\u7f51\u5361\u5f00\u542fAP\u6a21\u5f0f",permalink:"/en/docs/T113s3-SdNand/part6/AIC8800APMode"},next:{title:"\u57fa\u4e8eV4L2\u6846\u67b6\u53d1\u9001UVC\u89c6\u9891",permalink:"/en/docs/T113s3-SdNand/part6/ImplementingUVCOnV4L2"}},c={},l=[{value:"MJPEG\u7f16\u7801\u4ecb\u7ecd",id:"mjpeg\u7f16\u7801\u4ecb\u7ecd",level:2},{value:"MJPEG\u7f16\u7801\u683c\u5f0f\u7684\u7279\u70b9",id:"mjpeg\u7f16\u7801\u683c\u5f0f\u7684\u7279\u70b9",level:2},{value:"MJPEG\u7684\u5de5\u4f5c\u539f\u7406",id:"mjpeg\u7684\u5de5\u4f5c\u539f\u7406",level:2},{value:"MJPEG\u7684\u5e94\u7528\u573a\u666f",id:"mjpeg\u7684\u5e94\u7528\u573a\u666f",level:2},{value:"MJPEG\u7684\u4f18\u7f3a\u70b9",id:"mjpeg\u7684\u4f18\u7f3a\u70b9",level:2},{value:"\u6574\u4f53\u601d\u8def",id:"\u6574\u4f53\u601d\u8def",level:2}];function o(r){const n={code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"\u65e0\u7ebf\u4f20\u5c4f\u663e\u793a",children:"\u65e0\u7ebf\u4f20\u5c4f\u663e\u793a"}),"\n",(0,t.jsx)(n.p,{children:"\u5728 T113s3 \u4e0a\u4f7f\u7528\u65e0\u7ebf\u7f51\u5361\u63a5\u6536\u89c6\u9891\u5e76\u4e14\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\u9762\u3002"}),"\n",(0,t.jsx)(n.h2,{id:"mjpeg\u7f16\u7801\u4ecb\u7ecd",children:"MJPEG\u7f16\u7801\u4ecb\u7ecd"}),"\n",(0,t.jsx)(n.p,{children:"MJPEG\uff08Motion JPEG\uff09\u662f\u4e00\u79cd\u89c6\u9891\u7f16\u7801\u683c\u5f0f\uff0c\u5b83\u5c06\u6bcf\u4e00\u5e27\u56fe\u50cf\uff08\u9759\u6001\u56fe\u50cf\uff09\u4f5c\u4e3aJPEG\uff08Joint Photographic Experts Group\uff09\u683c\u5f0f\u7684\u5355\u72ec\u56fe\u50cf\u8fdb\u884c\u538b\u7f29\u548c\u7f16\u7801\u3002\u7b80\u5355\u6765\u8bf4\uff0cMJPEG\u662f\u4e00\u79cd\u5c06\u89c6\u9891\u4e2d\u7684\u6bcf\u4e00\u5e27\u5f53\u4f5c\u72ec\u7acb\u7684JPEG\u56fe\u50cf\u6765\u7f16\u7801\u7684\u89c6\u9891\u7f16\u7801\u683c\u5f0f\uff0c\u800c\u4e0d\u662f\u50cfH.264\u3001HEVC\u7b49\u90a3\u6837\u4f7f\u7528\u57fa\u4e8e\u5e27\u95f4\u9884\u6d4b\u7684\u538b\u7f29\u65b9\u5f0f\u3002"}),"\n",(0,t.jsx)(n.h2,{id:"mjpeg\u7f16\u7801\u683c\u5f0f\u7684\u7279\u70b9",children:"MJPEG\u7f16\u7801\u683c\u5f0f\u7684\u7279\u70b9"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u6bcf\u5e27\u56fe\u50cf\u72ec\u7acb\u7f16\u7801"}),"\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u5728MJPEG\u4e2d\uff0c\u6bcf\u4e00\u5e27\u56fe\u50cf\u90fd\u88ab\u538b\u7f29\u4e3a\u5355\u72ec\u7684JPEG\u56fe\u50cf\u3002"}),"\n",(0,t.jsx)(n.li,{children:"\u8fd9\u610f\u5473\u7740\u89c6\u9891\u4e2d\u7684\u6bcf\u4e00\u5e27\u90fd\u662f\u72ec\u7acb\u7684JPEG\u56fe\u50cf\uff0c\u800c\u4e0d\u50cf\u5176\u4ed6\u89c6\u9891\u7f16\u7801\u683c\u5f0f\u90a3\u6837\u4f9d\u8d56\u5e27\u95f4\u5dee\u5f02\uff08\u5982I\u5e27\u3001P\u5e27\u548cB\u5e27\uff09\u3002"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u538b\u7f29\u6548\u7387\u8f83\u4f4e"}),"\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7531\u4e8e\u6bcf\u4e00\u5e27\u90fd\u662f\u72ec\u7acb\u7f16\u7801\u7684\uff0cMJPEG\u76f8\u6bd4\u4e8e\u66f4\u590d\u6742\u7684\u7f16\u7801\u683c\u5f0f\uff08\u5982H.264\u3001H.265\uff09\u5177\u6709\u8f83\u4f4e\u7684\u538b\u7f29\u6548\u7387\u3002\u7279\u522b\u662f\u5728\u9ad8\u5e27\u7387\u7684\u89c6\u9891\u4e2d\uff0cMJPEG\u7684\u538b\u7f29\u6548\u7387\u5f80\u5f80\u4e0d\u5982\u5176\u4ed6\u7f16\u7801\u683c\u5f0f\u3002"}),"\n",(0,t.jsx)(n.li,{children:"\u56e0\u4e3a\u5b83\u4e0d\u5229\u7528\u5e27\u95f4\u5dee\u5f02\uff0c\u6240\u4ee5\u5bf9\u6bd4\u4f8b\u5982H.264\u7684\u89c6\u9891\uff0cMJPEG\u6587\u4ef6\u7684\u5927\u5c0f\u901a\u5e38\u4f1a\u66f4\u5927\u3002"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u9ad8\u89e3\u7801\u6548\u7387"}),"\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"MJPEG\u7684\u4e00\u4e2a\u4f18\u52bf\u662f\u89e3\u7801\u6548\u7387\u975e\u5e38\u9ad8\uff0c\u56e0\u4e3a\u6bcf\u4e00\u5e27\u90fd\u662f\u72ec\u7acb\u7684JPEG\u56fe\u50cf\u3002\u89e3\u7801\u65f6\u4e0d\u9700\u8981\u53c2\u8003\u5176\u4ed6\u5e27\uff0c\u53ea\u9700\u8981\u89e3\u7801\u6bcf\u4e00\u5e27JPEG\u56fe\u50cf\u5373\u53ef\u3002\u8fd9\u4f7f\u5f97MJPEG\u5728\u786c\u4ef6\u89e3\u7801\u4e0a\u975e\u5e38\u9ad8\u6548\uff0c\u9002\u5408\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3001\u5b9e\u65f6\u89c6\u9891\u4f20\u8f93\u7b49\u573a\u666f\u3002"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u9002\u7528\u4e8e\u5b9e\u65f6\u89c6\u9891\u6d41"}),"\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"MJPEG\u901a\u5e38\u7528\u4e8e\u9700\u8981\u5b9e\u65f6\u3001\u4f4e\u5ef6\u8fdf\u7684\u89c6\u9891\u6d41\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u5f88\u591a\u7f51\u7edc\u6444\u50cf\u5934\u3001\u76d1\u63a7\u6444\u50cf\u5934\u3001\u89c6\u9891\u4f1a\u8bae\u7cfb\u7edf\u7b49\u4f7f\u7528MJPEG\u8fdb\u884c\u89c6\u9891\u4f20\u8f93\u3002"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u7b80\u5355\u7684\u7f16\u7801\u548c\u89e3\u7801\u6d41\u7a0b\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u7531\u4e8eMJPEG\u662f\u57fa\u4e8eJPEG\u56fe\u50cf\u538b\u7f29\u7684\uff0c\u56e0\u6b64\u5b83\u7684\u7f16\u7801\u548c\u89e3\u7801\u7b97\u6cd5\u76f8\u5bf9\u7b80\u5355\u3002\u5728\u5f88\u591a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u7531\u4e8e\u5176\u7b80\u5355\u6027\uff0cMJPEG\u5e38\u5e38\u88ab\u7528\u4e8e\u5b9e\u65f6\u89c6\u9891\u6355\u83b7\u548c\u663e\u793a\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"mjpeg\u7684\u5de5\u4f5c\u539f\u7406",children:"MJPEG\u7684\u5de5\u4f5c\u539f\u7406"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u7f16\u7801\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u89c6\u9891\u7684\u6bcf\u4e00\u5e27\u56fe\u50cf\u90fd\u901a\u8fc7JPEG\u538b\u7f29\u6807\u51c6\u5355\u72ec\u8fdb\u884c\u538b\u7f29\u3002JPEG\u56fe\u50cf\u538b\u7f29\u901a\u5e38\u91c7\u7528\u79bb\u6563\u4f59\u5f26\u53d8\u6362\uff08DCT\uff09\u5bf9\u56fe\u50cf\u8fdb\u884c\u538b\u7f29\uff0c\u901a\u8fc7\u4e22\u5f03\u4e00\u4e9b\u4e0d\u663e\u8457\u7684\u4fe1\u606f\u6765\u51cf\u5c0f\u56fe\u50cf\u6587\u4ef6\u7684\u5927\u5c0f\u3002"}),"\n",(0,t.jsx)(n.li,{children:"\u6bcf\u4e00\u5e27\u56fe\u50cf\u7684JPEG\u538b\u7f29\u8fc7\u7a0b\u4e0e\u666e\u901a\u7684\u9759\u6001JPEG\u56fe\u50cf\u538b\u7f29\u7c7b\u4f3c\u3002\u5177\u4f53\u6b65\u9aa4\u5305\u62ec\u989c\u8272\u7a7a\u95f4\u8f6c\u6362\uff08\u901a\u5e38\u662f\u4eceRGB\u8f6c\u4e3aYUV\u683c\u5f0f\uff09\uff0c\u79bb\u6563\u4f59\u5f26\u53d8\u6362\uff08DCT\uff09\uff0c\u91cf\u5316\uff0c\u970d\u592b\u66fc\u7f16\u7801\u7b49\u3002"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u89e3\u7801\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u89e3\u7801\u8fc7\u7a0b\u5f88\u7b80\u5355\uff0cMJPEG\u89c6\u9891\u6d41\u7684\u6bcf\u4e00\u5e27\u89c6\u9891\u53ea\u9700\u8981\u5c06JPEG\u56fe\u50cf\u9010\u4e00\u89e3\u7801\u51fa\u6765\uff0c\u4e0d\u9700\u8981\u53c2\u8003\u5176\u4ed6\u5e27\u3002\u56e0\u6b64\uff0c\u89e3\u7801\u5668\u53ef\u4ee5\u76f4\u63a5\u5c06\u6bcf\u4e00\u5e27\u7684JPEG\u56fe\u50cf\u89e3\u7801\u4e3aRGB\u6216\u8005YUV\u56fe\u50cf\u683c\u5f0f\u6765\u663e\u793a\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"mjpeg\u7684\u5e94\u7528\u573a\u666f",children:"MJPEG\u7684\u5e94\u7528\u573a\u666f"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u7f51\u7edc\u6444\u50cf\u5934\u548c\u76d1\u63a7\u7cfb\u7edf"}),"\uff1a\r\n\u5f88\u591a\u4f4e\u6210\u672c\u7684\u7f51\u7edc\u6444\u50cf\u5934\u4f7f\u7528MJPEG\u683c\u5f0f\u8fdb\u884c\u89c6\u9891\u6d41\u4f20\u8f93\uff0c\u56e0\u4e3aMJPEG\u53ef\u4ee5\u7b80\u5316\u786c\u4ef6\u89e3\u7801\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5bf9\u4e8e\u5b9e\u65f6\u89c6\u9891\u76d1\u63a7\u5e94\u7528\u6765\u8bf4\uff0c\u5ef6\u8fdf\u8981\u6c42\u8f83\u9ad8\uff0c\u800cMJPEG\u89e3\u7801\u8f83\u4e3a\u5feb\u901f\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u89c6\u9891\u4f1a\u8bae"}),"\uff1a\r\nMJPEG\u4e5f\u5e7f\u6cdb\u5e94\u7528\u4e8e\u89c6\u9891\u4f1a\u8bae\u7cfb\u7edf\uff0c\u7279\u522b\u662f\u5728\u4f4e\u5e26\u5bbd\u7f51\u7edc\u73af\u5883\u4e0b\uff0c\u5b83\u7684\u7b80\u5355\u6027\u6709\u65f6\u6bd4\u9ad8\u538b\u7f29\u7387\u7684\u7f16\u7801\u65b9\u5f0f\uff08\u5982H.264\uff09\u66f4\u80fd\u63d0\u4f9b\u7a33\u5b9a\u7684\u5b9e\u65f6\u89c6\u9891\u6d41\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u5b9e\u65f6\u89c6\u9891\u6355\u6349"}),"\uff1a\r\n\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0cMJPEG\u7531\u4e8e\u5176\u7b80\u5355\u6027\u548c\u89e3\u7801\u7684\u9ad8\u6548\u6027\uff0c\u6210\u4e3a\u5b9e\u65f6\u89c6\u9891\u6355\u6349\u548c\u6d41\u5a92\u4f53\u4f20\u8f93\u7684\u7406\u60f3\u9009\u62e9\uff0c\u5c24\u5176\u5728\u8d44\u6e90\u6709\u9650\u7684\u8bbe\u5907\u4e2d\u3002"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u4f4e\u5e26\u5bbd\u89c6\u9891\u6d41"}),"\uff1a\r\nMJPEG\u9002\u7528\u4e8e\u5e26\u5bbd\u53d7\u9650\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u4f4e\u5e26\u5bbd\u7684\u7f51\u7edc\u4f20\u8f93\u73af\u5883\u4e0b\uff0c\u5c24\u5176\u662f\u65e0\u6cd5\u652f\u6301\u66f4\u590d\u6742\u7f16\u7801\u683c\u5f0f\uff08\u5982H.264\u6216H.265\uff09\u7684\u60c5\u51b5\u4e0b\u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"mjpeg\u7684\u4f18\u7f3a\u70b9",children:"MJPEG\u7684\u4f18\u7f3a\u70b9"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\u4f18\u70b9\uff1a"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u89e3\u7801\u7b80\u5355"}),"\uff1a\u6bcf\u5e27\u662f\u72ec\u7acb\u7684JPEG\u56fe\u50cf\uff0c\u4e0d\u9700\u8981\u53c2\u8003\u5176\u4ed6\u5e27\uff0c\u89e3\u7801\u975e\u5e38\u5feb\u901f\u548c\u7b80\u5355\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u4f4e\u5ef6\u8fdf"}),"\uff1a\u7531\u4e8e\u6bcf\u4e00\u5e27\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u53ef\u4ee5\u5feb\u901f\u89e3\u7801\u548c\u663e\u793a\uff0c\u9002\u5408\u5b9e\u65f6\u89c6\u9891\u6d41\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u786c\u4ef6\u89e3\u7801\u652f\u6301\u5e7f\u6cdb"}),"\uff1a\u8bb8\u591a\u5d4c\u5165\u5f0f\u5e73\u53f0\u548c\u8bbe\u5907\u63d0\u4f9b\u786c\u4ef6JPEG\u89e3\u7801\u652f\u6301\uff0c\u80fd\u591f\u9ad8\u6548\u5730\u5904\u7406MJPEG\u89c6\u9891\u6d41\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u65e0\u9700\u590d\u6742\u7684\u7f16\u7801/\u89e3\u7801\u8bbe\u7f6e"}),"\uff1a\u76f8\u8f83\u4e8e\u5982H.264\u7b49\u590d\u6742\u7684\u7f16\u89e3\u7801\u7b97\u6cd5\uff0cMJPEG\u7684\u7f16\u7801/\u89e3\u7801\u8fc7\u7a0b\u66f4\u4e3a\u7b80\u5355\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\u7f3a\u70b9\uff1a"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u538b\u7f29\u6548\u7387\u8f83\u4f4e"}),"\uff1a\u6bcf\u4e00\u5e27\u90fd\u72ec\u7acb\u7f16\u7801\uff0c\u4e0d\u5229\u7528\u5e27\u95f4\u5dee\u5f02\uff0c\u5bfc\u81f4\u76f8\u8f83\u4e8e\u5176\u4ed6\u89c6\u9891\u7f16\u7801\u683c\u5f0f\uff08\u5982H.264\uff09\u6709\u66f4\u5927\u7684\u6587\u4ef6\u5c3a\u5bf8\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u6587\u4ef6\u5927\u5c0f\u8f83\u5927"}),"\uff1a\u5c24\u5176\u662f\u5728\u9ad8\u5206\u8fa8\u7387\u548c\u9ad8\u5e27\u7387\u7684\u60c5\u51b5\u4e0b\uff0cMJPEG\u751f\u6210\u7684\u89c6\u9891\u6587\u4ef6\u6bd4H.264\u7b49\u7f16\u7801\u683c\u5f0f\u66f4\u5927\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u4e0d\u9002\u5408\u957f\u65f6\u95f4\u89c6\u9891\u5b58\u50a8"}),"\uff1a\u7531\u4e8e\u6bcf\u5e27\u90fd\u9700\u8981\u5b58\u50a8\u5b8c\u6574\u7684\u56fe\u50cf\u6570\u636e\uff0cMJPEG\u4e0d\u9002\u5408\u7528\u4e8e\u9700\u8981\u9ad8\u5b58\u50a8\u6548\u7387\u7684\u89c6\u9891\u5b58\u50a8\u573a\u666f\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\u603b\u7ed3\uff1a"})}),"\n",(0,t.jsx)(n.p,{children:"MJPEG\u683c\u5f0f\u901a\u8fc7\u5c06\u6bcf\u4e00\u5e27\u89c6\u9891\u5355\u72ec\u538b\u7f29\u4e3aJPEG\u56fe\u50cf\u6765\u5904\u7406\u89c6\u9891\u6d41\uff0c\u867d\u7136\u8fd9\u79cd\u65b9\u5f0f\u5bfc\u81f4\u4e86\u538b\u7f29\u6548\u7387\u4f4e\uff0c\u4f46\u5b83\u7684\u89e3\u7801\u901f\u5ea6\u5feb\u3001\u5ef6\u8fdf\u4f4e\u3001\u786c\u4ef6\u652f\u6301\u5e7f\u6cdb\uff0c\u9002\u5408\u5b9e\u65f6\u89c6\u9891\u4f20\u8f93\u548c\u4f4e\u5e26\u5bbd\u5e94\u7528\u3002MJPEG\u7279\u522b\u9002\u5408\u5d4c\u5165\u5f0f\u8bbe\u5907\u3001\u76d1\u63a7\u7cfb\u7edf\u3001\u89c6\u9891\u4f1a\u8bae\u7b49\u573a\u666f\uff0c\u4f46\u5bf9\u4e8e\u957f\u65f6\u95f4\u5b58\u50a8\u548c\u9ad8\u538b\u7f29\u6548\u7387\u7684\u9700\u6c42\uff0c\u5176\u4ed6\u89c6\u9891\u7f16\u7801\u683c\u5f0f\uff08\u5982H.264\u3001H.265\uff09\u4f1a\u66f4\u5177\u4f18\u52bf\u3002"}),"\n",(0,t.jsx)(n.h2,{id:"\u6574\u4f53\u601d\u8def",children:"\u6574\u4f53\u601d\u8def"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u5c06UVC \u76f8\u673a\u63d2\u5165\u88c5\u6709linux\u7cfb\u7edf\u7684\u4e2a\u4eba\u7535\u8111\uff1b"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u4eceUVC \u76f8\u673a\u83b7\u53d6MJPEG\u6570\u636e\u5e76\u53d1\u9001\uff1b"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"\u901a\u8fc7 T113s3\u677f\u8f7d\u7684aic8800\u7f51\u5361\u63a5\u6536\u5e76\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u9762\u3002"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a"})}),"\n",(0,t.jsx)(n.p,{children:"T113s3\u63a5\u6536\u7aef\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include <unistd.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <jpegdecode.h>\r\n\r\n#include <fcntl.h>       // For open and O_RDWR\r\n#include <linux/fb.h>    // For fb_var_screeninfo\r\n#include <sys/ioctl.h>   // For ioctl\r\n#include <sys/mman.h>    // For mmap, PROT_READ, PROT_WRITE, MAP_SHARED, MAP_FAILED\r\n#include <signal.h>  // \u9700\u8981\u6dfb\u52a0\u8fd9\u4e2a\u5934\u6587\u4ef6\r\n\r\n#include <sys/socket.h>\r\n#include <netinet/in.h>\r\n#include <arpa/inet.h>\r\n\r\n#define image_width 640\r\n#define image_height 480\r\n\r\n#define UDP_PORT 12345\r\n#define UDP_BUFFER_SIZE 65507\r\npthread_t udp_thread;  // \u7528\u4e8e\u63a5\u6536 UDP \u6d88\u606f\u7684\u7ebf\u7a0b\r\nvolatile int  stop_server = 0;  // \u7528\u4e8e\u6807\u8bb0\u662f\u5426\u505c\u6b62\u670d\u52a1\u5668\u7684\u6807\u5fd7\r\nint sockfd;\r\n\r\nunsigned char *frame_data = NULL;\r\nint frame_data_size = 0;\r\n\r\nint framebufferfd;\r\nunsigned int *fb_mem  = NULL;        //\u8bbe\u7f6e\u663e\u5b58\u7684\u4f4d\u6570\u4e3a32\u4f4d\r\nstruct fb_var_screeninfo var;\r\nstruct fb_fix_screeninfo fix;\r\n\r\n//\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u7528\u4e8e\u6355\u83b7 Ctrl+C (SIGINT) \u4fe1\u53f7\r\nvoid sigint_handler(int sig){\r\n    stop_server = 1;  // \u8bbe\u7f6e\u6807\u5fd7\uff0c\u901a\u77e5 UDP \u670d\u52a1\u5668\u7ebf\u7a0b\u9000\u51fa\r\n    shutdown(sockfd, SHUT_RDWR);  // \u5173\u95ed\u8bfb\u5199\u901a\u9053\r\n    close(sockfd);\r\n    printf("\\nStopping UDP server...\\n");\r\n}\r\n\r\nvoid writeDataToFile(const char *filename, uint8_t *data, size_t dataSize)\r\n{\r\n    if (data == NULL)\r\n    {\r\n        printf("Error: data is NULL\\n");\r\n        return;\r\n    }\r\n\r\n    FILE *f = fopen(filename, "wb");\r\n    if (f == NULL)\r\n    {\r\n        printf("Error opening file for writing\\n");\r\n        return;\r\n    }\r\n\r\n    size_t written = fwrite(data, 1, dataSize, f);\r\n    if (written != dataSize)\r\n    {\r\n        printf("Error writing data to file, written = %zu, expected = %zu\\n", written, dataSize);\r\n    }\r\n\r\n    if (fclose(f) != 0)\r\n    {\r\n        printf("Error closing file\\n");\r\n    }\r\n    else\r\n    {\r\n        printf("Data written to %s\\n", filename);\r\n    }\r\n}\r\n\r\nvoid convertRGB565ToRGBA8888( const char *filename, const uint8_t *rgb565Data, uint8_t *rgb888Data, uint8_t*rgba8888Data, int width, int height) {\r\n    // \u539f\u59cb\u56fe\u50cf\u5bbd\u9ad8\r\n    int src_width = 640;\r\n    int src_height = 480;\r\n\r\n    // \u5c4f\u5e55\u5bbd\u9ad8\r\n    int dst_width = 1024;\r\n    int dst_height = 600;\r\n\r\n    \r\n\r\n    if (rgb565Data == NULL) {\r\n        printf("Error: RGB565 data is NULL\\n");\r\n        return;\r\n    }\r\n\r\n    int pixelCount = width * height;\r\n    size_t rgb565Size = pixelCount * 2;  // RGB565\u6bcf\u4e2a\u50cf\u7d20\u53602\u5b57\u8282\r\n    if (rgb565Size <= 0) {\r\n        printf("Error: Invalid width or height\\n");\r\n        return;\r\n    }\r\n\r\n    if (rgb888Data == NULL) {\r\n        printf("Error: Failed to allocate memory for RGB888 data\\n");\r\n        return;\r\n    }\r\n\r\n    for (int y = 0; y < src_height; y++) {\r\n        for (int x = 0; x < src_width; x++) {\r\n            // \u7ec4\u5408\u4e24\u4e2a\u5b57\u8282\u4e3a16\u4f4d\u50cf\u7d20\u503c\uff08\u5047\u8bbe\u5c0f\u7aef\u5b58\u50a8\uff1a\u4f4e\u5b57\u8282\u5728\u524d\uff0c\u9ad8\u5b57\u8282\u5728\u540e\uff09\r\n            uint16_t pixel = ((uint16_t)rgb565Data[2*(y * src_width + x) + 1] << 8) | rgb565Data[2*(y * src_width + x)];\r\n\r\n            // \u63d0\u53d6RGB\u5206\u91cf\r\n            uint8_t r = (pixel >> 11) & 0x1F;  // \u9ad85\u4f4d\r\n            uint8_t g = (pixel >> 5)  & 0x3F;  // \u4e2d\u95f46\u4f4d\r\n            uint8_t b = pixel         & 0x1F;  // \u4f4e5\u4f4d\r\n\r\n            // \u5c065-6\u4f4d\u6269\u5c55\u52308\u4f4d\uff08\u4f7f\u7528\u5de6\u79fb\u548c\u6309\u4f4d\u6216\u64cd\u4f5c\uff09\r\n            rgb888Data[(y * src_width + x)*3]     = (r << 3) | (r >> 2);  // R\r\n            rgb888Data[(y * src_width + x)*3 + 1] = (g << 2) | (g >> 4);  // G\r\n            rgb888Data[(y * src_width + x)*3 + 2] = (b << 3) | (b >> 2);  // B\r\n            \r\n            rgba8888Data[(y * src_width + x) * 4 + 0] = rgb888Data[(y * src_width + x)*3 + 2];  // BGRA\u683c\u5f0f\r\n            rgba8888Data[(y * src_width + x)* 4 + 1] = rgb888Data[(y * src_width + x)*3 + 1];\r\n            rgba8888Data[(y * src_width + x) * 4 + 2] =  rgb888Data[(y * src_width + x)*3] ;\r\n            rgba8888Data[(y * src_width + x) * 4 + 3] = 255; // Alpha\u901a\u9053\u8bbe\u4e3a\u4e0d\u900f\u660e\r\n            \r\n            uint8_t ra = rgba8888Data[(y * src_width + x) * 4 + 0];\r\n            uint8_t ga = rgba8888Data[(y * src_width + x) * 4 + 1];\r\n            uint8_t ba = rgba8888Data[(y * src_width + x) * 4 + 2];\r\n            uint8_t aa= rgba8888Data[(y * src_width + x) * 4 + 3];\r\n            // \u8ba1\u7b97 framebuffer \u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u586b\u5145\r\n            int fb_index = (y * dst_width + x);  // framebuffer \u7684\u7d22\u5f15\r\n             // \u5c06 RGBA \u6570\u636e\u8f6c\u6362\u4e3a BGRA \u683c\u5f0f\r\n            fb_mem[fb_index] = (aa << 24) | (ba << 16) | (ga << 8) | ra;\r\n        }\r\n\r\n    }\r\n\r\n    return ;\r\n\r\n\r\n    //writeDataToFile(filename,rgb888Data,width*height*3);\r\n}\r\n\r\nstatic char *readSrcData(char *path, int *pLen)\r\n{\r\n    FILE *fp = NULL;\r\n    int ret = 0;\r\n    char *data = NULL;\r\n\r\n    // \u6253\u5f00\u6587\u4ef6\uff0c\u4ee5\u4e8c\u8fdb\u5236\u6a21\u5f0f\u8bfb\u53d6\r\n    fp = fopen(path, "rb");\r\n    if(fp == NULL)\r\n    {\r\n        printf("read jpeg file error, errno(%d)\\n", errno);\r\n        return NULL;\r\n    }\r\n\r\n    // \u5c06\u6587\u4ef6\u6307\u9488\u79fb\u52a8\u5230\u6587\u4ef6\u672b\u5c3e\r\n    fseek(fp, 0, SEEK_END);\r\n    // \u83b7\u53d6\u6587\u4ef6\u7684\u5b57\u8282\u6570\u5e76\u8d4b\u503c\u7ed9pLen\r\n    *pLen = ftell(fp);\r\n    // \u5c06\u6587\u4ef6\u6307\u9488\u91cd\u65b0\u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934\r\n    rewind(fp);\r\n\r\n    // \u5206\u914d\u4e00\u4e2a\u5927\u5c0f\u4e3apLen\u7684\u5185\u5b58\u5757\r\n    data = (char *) malloc(sizeof(char) * (*pLen));\r\n    if(data == NULL)\r\n    {   // \u5982\u679c\u5185\u5b58\u5206\u914d\u5931\u8d25\uff0c\u6253\u5370\u9519\u8bef\u4fe1\u606f\u5e76\u5173\u95ed\u6587\u4ef6\uff0c\u8fd4\u56deNULL\r\n        printf("malloc memory fail\\n");\r\n        fclose(fp);\r\n        return NULL;\r\n    }\r\n\r\n    // \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5230data\u7f13\u51b2\u533a\r\n    ret = fread(data, 1, *pLen, fp);\r\n    if (ret != *pLen)\r\n    {\r\n         // \u5982\u679c\u8bfb\u53d6\u7684\u6570\u636e\u5b57\u8282\u6570\u4e0e\u671f\u671b\u7684\u4e0d\u4e00\u81f4\uff0c\u6253\u5370\u9519\u8bef\u4fe1\u606f\uff0c\u91ca\u653e\u5185\u5b58\u5e76\u5173\u95ed\u6587\u4ef6\uff0c\u8fd4\u56deNULL\r\n        printf("read src file fail\\n");\r\n        fclose(fp);\r\n        free(data);\r\n        return NULL;\r\n    }\r\n\r\n    // \u5173\u95ed\u6587\u4ef6\r\n    fclose(fp);\r\n    return data;\r\n}\r\n\r\nint jpegdecodePacktest(char *srcBuf, int srcBufLen, JpegDecodeScaleDownRatio scaleRatio, JpegDecodeOutputDataType outputDataTpe , uint8_t *rgb888Data, uint8_t *rgba8888Data)\r\n{\r\n    \r\n    JpegDecoder* jpegdecoder;\r\n    jpegdecoder = JpegDecoderCreate();\r\n\r\n    if(NULL == jpegdecoder)\r\n    {\r\n        printf("create jpegdecoder failed\\n");\r\n        return -1;\r\n    }\r\n\r\n    JpegDecoderSetDataSourceBuf(jpegdecoder, srcBuf, srcBufLen, scaleRatio, outputDataTpe);\r\n    printf("srcBuf = %p, srcBufLen = %d\\n", srcBuf, srcBufLen);\r\n\r\n    // JpegDecoderSetDataSource(jpegdecoder, argv[1], scaleRatio, outputDataTpe);\r\n    printf("JpegDecoderSetDataSource end\\n");\r\n\r\n    ImgFrame* imgFrame  = JpegDecoderGetFrame(jpegdecoder);\r\n\r\n    if(imgFrame == NULL){\r\n        printf("JpegDecoderGetFrame fail\\n");\r\n        JpegDecoderDestory(jpegdecoder);\r\n        return -1;\r\n    } else {\r\n        printf("JpegDecoderGetFrame successfully, imgFrame->mWidth = %d, imgFrame->mHeight = %d, imgFrame->mYuvData = %p, imgFrame->mYuvSize = %d\\n",\r\n            imgFrame->mWidth, imgFrame->mHeight, imgFrame->mYuvData, imgFrame->mYuvSize);\r\n        printf("imgFrame->mRGB565Data = %p, imgFrame->mRGB565Size = %d\\n", imgFrame->mRGB565Data, imgFrame->mRGB565Size);\r\n\r\n        // // \u5c06\u89e3\u7801\u540e\u7684 RGB565 \u6570\u636e\u5199\u5165\u6587\u4ef6\r\n         //writeDataToFile("output.rgb565", imgFrame->mRGB565Data, imgFrame->mRGB565Size);\r\n\r\n         convertRGB565ToRGBA8888("output.rgb888", imgFrame->mRGB565Data, rgb888Data, rgba8888Data, image_width,image_height);\r\n        \r\n    }\r\n\r\n    JpegDecoderDestory(jpegdecoder);\r\n\r\n   \r\n\r\n    return 0;\r\n\r\n}\r\n\r\n\r\nint linuxfbinit( )\r\n{\r\n   \r\n    unsigned int i;\r\n    int ret;\r\n   \r\n\r\n    /*--------------\u7b2c\u4e00\u6b65--------------*/\r\n    framebufferfd = open("/dev/fb0",O_RDWR);                        //\u6253\u5f00framebuffer\u8bbe\u5907\r\n    if(framebufferfd == -1){\r\n        perror("Open LCD");\r\n        return -1;\r\n    }\r\n    /*--------------\u7b2c\u4e8c\u6b65--------------*/\r\n\r\n     //\u83b7\u53d6\u5c4f\u5e55\u7684\u53ef\u53d8\u53c2\u6570\r\n    ioctl(framebufferfd, FBIOGET_VSCREENINFO, &var);\r\n    //\u83b7\u53d6\u5c4f\u5e55\u7684\u56fa\u5b9a\u53c2\u6570\r\n    ioctl(framebufferfd, FBIOGET_FSCREENINFO, &fix);\r\n\r\n      //\u6253\u5370\u5206\u8fa8\u7387\r\n    printf("xres= %d,yres= %d \\n",var.xres,var.yres);\r\n     //\u6253\u5370\u603b\u5b57\u8282\u6570\u548c\u6bcf\u884c\u7684\u957f\u5ea6\r\n    printf("line_length=%d,smem_len= %d \\n",fix.line_length,fix.smem_len);\r\n    printf("xpanstep=%d,ypanstep= %d \\n",fix.xpanstep,fix.ypanstep);\r\n\r\n    /*--------------\u7b2c\u4e09\u6b65--------------*/\r\n\r\n    fb_mem = (unsigned int *)mmap(NULL, var.xres*var.yres*4,                 //\u83b7\u53d6\u663e\u5b58\uff0c\u6620\u5c04\u5185\u5b58\r\n        PROT_READ |  PROT_WRITE, MAP_SHARED, framebufferfd, 0);   \r\n                              \r\n    if(fb_mem == MAP_FAILED){\r\n        perror("Mmap LCD");\r\n        return -1;        \r\n    }\r\n\r\n    memset(fb_mem,0xff,var.xres*var.yres*4);                //\u6e05\u5c4f\r\n    return 0;\r\n}\r\n\r\n\r\n// \u4e3b\u51fd\u6570\r\nint main(int argc, char** argv)\r\n{\r\n    //\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\r\n    signal(SIGINT, sigint_handler);  // \u6355\u83b7 Ctrl+C \u53d1\u9001\u7684 SIGINT \u4fe1\u53f7\r\n\r\n    struct sockaddr_in  server_addr, client_addr;\r\n    socklen_t  addr_len  = sizeof(client_addr);\r\n    char socbuffer[UDP_BUFFER_SIZE];\r\n    frame_data_size = 0;\r\n \r\n    // \u521b\u5efa UDP \u5957\u63a5\u5b57\r\n    if( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 )\r\n    {\r\n         perror("UDP socket creation failed");\r\n         return -1;\r\n    }\r\n \r\n    // \u914d\u7f6e\u670d\u52a1\u5668\u5730\u5740\r\n    memset(&server_addr, 0, sizeof(server_addr));\r\n    server_addr.sin_family = AF_INET;\r\n    server_addr.sin_addr.s_addr = inet_addr("192.168.5.1");  // \u7ed1\u5b9a\u5230 192.168.5.1 \u5730\u5740\r\n    server_addr.sin_port = htons(UDP_PORT);  // \u7ed1\u5b9a\u7aef\u53e3 12345\r\n \r\n    // \u7ed1\u5b9a\u5957\u63a5\u5b57\u5230\u6307\u5b9a\u5730\u5740\u548c\u7aef\u53e3\r\n    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\r\n        perror("UDP bind failed");\r\n        close(sockfd);\r\n        return -1;\r\n    }\r\n    printf("UDP server listening on 192.168.5.1:%d...\\n", UDP_PORT);\r\n \r\n\r\n\r\n    printf("****************************************************************************\\n");\r\n    printf("* This program shows how to decode a jpeg picture to yuv or rgb data\\n");\r\n    printf("***************************************************************************\\n");\r\n\r\n    if(argc != 4)\r\n    {\r\n        printf("Usage:\\n");\r\n        printf("jpegdecodedemo argv[1] argv[2] argv[3] \\n");\r\n        printf(" argv[1]: the jpeg file which contains absolute path\\n");\r\n        printf(" argv[2]: the scaledown mode,support :0,1,2,3;0 means no scaledown,1 means scaledown 1/2,2 means scaledown 1/4,3 means scaledown 1/8 \\n");\r\n        printf(" argv[3]: the decoded data type,support:nv21 nv12 yu12 yv12 and rgb565 \\n");\r\n        printf("for example:jpegdecodedemo /mnt/SDCARD/test.jpg 1 yv12 \\n");\r\n        return -1;\r\n    }\r\n\r\n    uint8_t *rgb888Data = (uint8_t *)malloc(image_width * image_height * 3); // 3\u5b57\u8282\u6bcf\u50cf\u7d20 RGB888\r\n    uint8_t *rgba8888Data = (uint8_t *)malloc(image_width * image_height * 4); \r\n\r\n    JpegDecodeScaleDownRatio scaleRatio;\r\n    int inputScaledown = atoi(argv[2]);\r\n    switch(inputScaledown)\r\n    {\r\n        case 0:\r\n            scaleRatio = JPEG_DECODE_SCALE_DOWN_1;\r\n            break;\r\n        case 1:\r\n            scaleRatio = JPEG_DECODE_SCALE_DOWN_2;\r\n            break;\r\n        case 2:\r\n            scaleRatio = JPEG_DECODE_SCALE_DOWN_4;\r\n            break;\r\n        case 3:\r\n            scaleRatio = JPEG_DECODE_SCALE_DOWN_8;\r\n            break;\r\n        default:\r\n            printf("the input scaledown ratio:%d is not support,use the default 0\\n", inputScaledown);\r\n            scaleRatio = JPEG_DECODE_SCALE_DOWN_1;\r\n            break;\r\n    }\r\n\r\n    JpegDecodeOutputDataType outputDataTpe;\r\n    if(strcmp(argv[3], "nv21") == 0){\r\n        outputDataTpe = JpegDecodeOutputDataNV21;\r\n    } else if(strcmp(argv[3], "nv12") == 0){\r\n        outputDataTpe = JpegDecodeOutputDataNV12;\r\n    } else if(strcmp(argv[3], "yu12") == 0){\r\n        outputDataTpe = JpegDecodeOutputDataYU12;\r\n    } else if(strcmp(argv[3], "yv12") == 0){\r\n        outputDataTpe = JpegDecodeOutputDataYV12;\r\n    } else if(strcmp(argv[3], "rgb565") == 0){\r\n        outputDataTpe = JpegDecodeOutputDataRGB565;\r\n    } else {\r\n        printf("the %s is not support,use the default outputDataTpe:nv21\\n", argv[3]);\r\n        outputDataTpe = JpegDecodeOutputDataNV21;\r\n    }\r\n    \r\n    linuxfbinit( );\r\n    \r\n    while (stop_server == 0)\r\n    {\r\n        int len = recvfrom(sockfd, (char *)socbuffer, UDP_BUFFER_SIZE, MSG_WAITALL,\r\n                            (struct sockaddr *)&client_addr, &addr_len);\r\n    \r\n        if (len < 0)\r\n        {\r\n            perror("UDP recvfrom failed");\r\n        }\r\n        else\r\n        {\r\n            printf("Received message of length: %d bytes\\n", len);\r\n    \r\n            // \u786e\u4fdd\u6570\u636e\u957f\u5ea6\u7b26\u5408\u8981\u6c42\r\n            if (len <= 0 || len > UDP_BUFFER_SIZE)\r\n            {\r\n                printf("Invalid data length\\n");\r\n                continue;\r\n            }\r\n    \r\n            // \u6e05\u7a7a\u5e76\u91cd\u65b0\u5206\u914d\u5e27\u7f13\u51b2\u533a\r\n            free(frame_data);\r\n            frame_data = (char *)malloc(len);\r\n            if (frame_data == NULL)\r\n            {\r\n                perror("Memory allocation failed");\r\n                frame_data_size = 0;\r\n                continue;\r\n            }\r\n    \r\n            // \u5c06\u63a5\u6536\u5230\u7684\u6570\u636e\u590d\u5236\u5230\u5e27\u7f13\u51b2\u533a\r\n            memcpy(frame_data, socbuffer, len);\r\n            frame_data_size = len;\r\n    \r\n            printf("New frame received, processing...\\n");\r\n            /*\r\n            char* srcBuf;\r\n            int srcBufLen = 0;\r\n            srcBuf = readSrcData(argv[1], &srcBufLen);\r\n            */\r\n\r\n            // \u8c03\u7528\u89e3\u7801\u51fd\u6570\uff0c\u786e\u4fdd\u89e3\u7801\u540e\u7684\u5185\u5b58\u7ba1\u7406\u6b63\u786e\r\n            jpegdecodePacktest(frame_data, frame_data_size, scaleRatio, outputDataTpe, rgb888Data, rgba8888Data);\r\n           \r\n            // \u786e\u4fdd\u89e3\u7801\u540e\u4e0d\u91cd\u590d\u91ca\u653e\u5185\u5b58\r\n            // \u5982\u679c\u89e3\u7801\u8fc7\u7a0b\u4e2d\u5df2\u5206\u914d\u4e86\u5185\u5b58\u5e76\u91ca\u653e\uff0c\u8bf7\u786e\u4fdd\u5728\u6b64\u4e0d\u518d\u8c03\u7528 free(frame_data)\r\n            frame_data_size = 0;\r\n            frame_data = NULL;\r\n        }\r\n    }\r\n    \r\n    munmap(fb_mem,var.xres*var.yres*4); //\u6620\u5c04\u540e\u7684\u5730\u5740\uff0c\u901a\u8fc7mmap\u8fd4\u56de\u7684\u503c        \r\n    \r\n    close(framebufferfd);                         //\u5173\u95edfb0\u8bbe\u5907\u6587\u4ef6\r\n    close(sockfd);\r\n\r\n    printf("UDP server thread stopped.\\n");\r\n    printf("\\n");\r\n    printf("*************************************************************************\\n");\r\n    printf("* Quit the program, goodbye!\\n");\r\n    printf("********************************************************************\\n");\r\n    printf("\\n");\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u63a5\u6536\u622a\u56fe\u5982\u4e0b\uff1a"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"image-20250303154221353",src:e(94187).Z+"",width:"575",height:"767"})})]})}function p(r={}){const{wrapper:n}={...(0,i.a)(),...r.components};return n?(0,t.jsx)(n,{...r,children:(0,t.jsx)(o,{...r})}):o(r)}},94187:(r,n,e)=>{e.d(n,{Z:()=>t});const t=e.p+"assets/images/image-20250303154221353-b468367197fbb606a99e9e76d0e9b350.png"},11151:(r,n,e)=>{e.d(n,{Z:()=>d,a:()=>s});var t=e(67294);const i={},a=t.createContext(i);function s(r){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function d(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:s(r.components),t.createElement(a.Provider,{value:n},r.children)}}}]);