"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2883],{14805:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>f,contentTitle:()=>c,default:()=>a,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=e(85893),i=e(11151);const s={},c="V4L2\u6444\u50cf\u5934\u6293\u56fe\u5b9e\u73b0",d={id:"T113i-Industrial/part4/V4L2CameraCaptureImplementation",title:"V4L2\u6444\u50cf\u5934\u6293\u56fe\u5b9e\u73b0",description:"\u672c\u7ae0\u8282\u5c06\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528 Video4Linux2 (V4L2) \u6846\u67b6\u6765\u6355\u83b7CVBS\u6444\u50cf\u5934\u56fe\u50cf\u3002",source:"@site/docs/T113i-Industrial/part4/03-V4L2CameraCaptureImplementation.md",sourceDirName:"T113i-Industrial/part4",slug:"/T113i-Industrial/part4/V4L2CameraCaptureImplementation",permalink:"/en/docs/T113i-Industrial/part4/V4L2CameraCaptureImplementation",draft:!1,unlisted:!1,editUrl:"https://github.com/100askTeam/linuxboard-docs/tree/main/docs/T113i-Industrial/part4/03-V4L2CameraCaptureImplementation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"t113iSidebar",previous:{title:"LVGL-v9.2\u79fb\u690d",permalink:"/en/docs/T113i-Industrial/part4/LVGL-v9.2Porting"}},f={},l=[{value:"<strong>\u786c\u4ef6\u4e0e\u8f6f\u4ef6\u51c6\u5907</strong>",id:"\u786c\u4ef6\u4e0e\u8f6f\u4ef6\u51c6\u5907",level:2},{value:"\u786c\u4ef6\u8fde\u63a5\u6307\u5357",id:"\u786c\u4ef6\u8fde\u63a5\u6307\u5357",level:2},{value:"TVD\u9a71\u52a8\u6846\u67b6",id:"tvd\u9a71\u52a8\u6846\u67b6",level:2},{value:"\u6293\u56fe\u6d41\u7a0b",id:"\u6293\u56fe\u6d41\u7a0b",level:2},{value:"\u4ec0\u4e48\u662fV4L2\u6846\u67b6",id:"\u4ec0\u4e48\u662fv4l2\u6846\u67b6",level:3},{value:"\u6253\u5f00\u8bbe\u5907",id:"\u6253\u5f00\u8bbe\u5907",level:3},{value:"\u83b7\u53d6\u652f\u6301\u683c\u5f0f",id:"\u83b7\u53d6\u652f\u6301\u683c\u5f0f",level:3},{value:"\u67e5\u8be2\u8bbe\u5907\u80fd\u529b",id:"\u67e5\u8be2\u8bbe\u5907\u80fd\u529b",level:3},{value:"\u914d\u7f6e\u6444\u50cf\u5934",id:"\u914d\u7f6e\u6444\u50cf\u5934",level:3},{value:"\u7533\u8bf7\u5185\u6838\u7f13\u51b2\u533a",id:"\u7533\u8bf7\u5185\u6838\u7f13\u51b2\u533a",level:3},{value:"\u6620\u5c04\u5185\u6838\u7f13\u51b2\u533a",id:"\u6620\u5c04\u5185\u6838\u7f13\u51b2\u533a",level:3},{value:"\u91c7\u96c6\u6570\u636e",id:"\u91c7\u96c6\u6570\u636e",level:3},{value:"\u6e90\u7801\u4f7f\u7528\u65b9\u6cd5",id:"\u6e90\u7801\u4f7f\u7528\u65b9\u6cd5",level:2}];function p(n){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"v4l2\u6444\u50cf\u5934\u6293\u56fe\u5b9e\u73b0",children:"V4L2\u6444\u50cf\u5934\u6293\u56fe\u5b9e\u73b0"}),"\n",(0,t.jsx)(r.p,{children:"\u672c\u7ae0\u8282\u5c06\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528 Video4Linux2 (V4L2) \u6846\u67b6\u6765\u6355\u83b7CVBS\u6444\u50cf\u5934\u56fe\u50cf\u3002"}),"\n",(0,t.jsx)(r.h2,{id:"\u786c\u4ef6\u4e0e\u8f6f\u4ef6\u51c6\u5907",children:(0,t.jsx)(r.strong,{children:"\u786c\u4ef6\u4e0e\u8f6f\u4ef6\u51c6\u5907"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"\u5b66\u4e60\u4e4b\u524d\uff0c\u5148\u505a\u597d\u4ee5\u4e0b\u51c6\u5907\u3002"}),"\n"]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"\u786c\u4ef6\uff1aT113i-Industrial \u5f00\u53d1\u677f"}),"\n",(0,t.jsx)(r.li,{children:"\u786c\u4ef6\uff1atypeC\u7ebf X2"}),"\n",(0,t.jsx)(r.li,{children:"\u786c\u4ef6\uff1acvbs\u6444\u50cf\u5934"}),"\n",(0,t.jsxs)(r.li,{children:["\u8f6f\u4ef6\uff1a\u5168\u5fd7\u7ebf\u5237\u5de5\u5177\uff1a",(0,t.jsx)(r.a,{href:"https://gitlab.com/dongshanpi/tools/-/raw/main/AllwinnertechPhoeniSuit.zip",children:"AllwinnertechPhoeniSuit"})]}),"\n",(0,t.jsxs)(r.li,{children:["\u8f6f\u4ef6\uff1a\u5168\u5fd7USB\u70e7\u5f55\u9a71\u52a8\uff1a",(0,t.jsx)(r.a,{href:"https://gitlab.com/dongshanpi/tools/-/raw/main/AllwinnerUSBFlashDeviceDriver.zip",children:"AllwinnerUSBFlashDeviceDriver"})]}),"\n",(0,t.jsx)(r.li,{children:"\u8f6f\u4ef6\uff1a\u955c\u50cf\uff08\u652f\u6301tvd\uff09\uff1at113_i_linux_evb1_auto_uart0.img"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"\u786c\u4ef6\u8fde\u63a5\u6307\u5357",children:"\u786c\u4ef6\u8fde\u63a5\u6307\u5357"}),"\n",(0,t.jsx)(r.p,{children:"\u5148\u628a\u6444\u50cf\u5934\u63a5\u4e0a\uff0c\u4e0b\u9762\u56fe\u7247\u662f\u5c06cvbs\u6444\u50cf\u5934\u8fde\u63a5\u5230 T113i-Industrial \u5f00\u53d1\u677f\u7684\u6307\u5357\u3002"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"image-20240826145850627",src:e(54618).Z+"",width:"1119",height:"840"})}),"\n",(0,t.jsx)(r.h2,{id:"tvd\u9a71\u52a8\u6846\u67b6",children:"TVD\u9a71\u52a8\u6846\u67b6"}),"\n",(0,t.jsx)(r.p,{children:"CVBS\u6444\u50cf\u5934\u8fde\u63a5\u7684\u6a21\u5757\u662fTVD\u786c\u4ef6\u6a21\u5757\uff0c\u4e5f\u53ebTVIN\u6a21\u5757\u3002\u5b83\u8d1f\u8d23\u63a5\u6536CVBS\u4fe1\u53f7\u5e76\u5c06\u5176\u89e3\u7801\u4e3a\u53ef\u663e\u793a\u7684\u89c6\u9891\u683c\u5f0f\u3002"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"image-20240826152237248",src:e(74154).Z+"",width:"998",height:"737"})}),"\n",(0,t.jsx)(r.p,{children:"\u7531\u4e0a\u56fe\u53ef\u4ee5\u77e5\u9053\uff0cTVD \u9a71\u52a8\u53ea\u662f\u8d1f\u8d23\u628a TVD \u7684\u786c\u4ef6\u63cf\u8ff0\u5b8c\u6210\u5e76\u6ce8\u518c\u8fdb V4L2 \u6846\u67b6\uff0c\u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u5173\u5fc3TVD\u9a71\u52a8\uff0c\u5177\u4f53\u8fd8\u662f\u653e\u5728\u7528\u6237\u6001\r\n\u7684\u5e94\u7528\u5c42\uff0c\u57fa\u4e8eV4L2\u7684\u6846\u67b6\u53bb\u7f16\u7a0b\uff0c\u5b9e\u73b0\u6293\u56fe\u529f\u80fd\u3002"}),"\n",(0,t.jsx)(r.h2,{id:"\u6293\u56fe\u6d41\u7a0b",children:"\u6293\u56fe\u6d41\u7a0b"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"\u63a5\u4e0b\u6765\uff0c\u5c06\u8bb2\u89e3\u57fa\u4e8eV4L2\u7684\u6846\u67b6\u53bb\u7f16\u7a0b\u5b9e\u73b0\u6293\u56fe\u7684\u6d41\u7a0b"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"\u4ec0\u4e48\u662fv4l2\u6846\u67b6",children:"\u4ec0\u4e48\u662fV4L2\u6846\u67b6"}),"\n",(0,t.jsx)(r.p,{children:"V4L2\uff08Video for Linux 2\uff09\u6846\u67b6\u662f Linux \u5185\u6838\u4e2d\u7528\u4e8e\u5904\u7406\u89c6\u9891\u8bbe\u5907\u7684\u4e00\u5957 API \u548c\u9a71\u52a8\u7a0b\u5e8f\u6846\u67b6\u3002\u5b83\u63d0\u4f9b\u4e86\u5bf9\u89c6\u9891\u8bbe\u5907\u7684\u7edf\u4e00\u8bbf\u95ee\u63a5\u53e3\uff0c\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u65b9\u4fbf\u5730\u6355\u83b7\u548c\u5904\u7406\u89c6\u9891\u6570\u636e\u3002"}),"\n",(0,t.jsx)(r.h3,{id:"\u6253\u5f00\u8bbe\u5907",children:"\u6253\u5f00\u8bbe\u5907"}),"\n",(0,t.jsx)(r.p,{children:"\u4e00\u822c\uff0c\u5f53\u6444\u50cf\u5934\u63d2\u5165\u5f00\u53d1\u677f\u4e0a\uff0c\u5728/dev\u76ee\u5f55\u91cc\uff0c\u4f1a\u51fa\u73b0\u76f8\u5e94\u7684video\u8282\u70b9\uff0c\u4f46\u662f\u8fd9\u91cc\u5373\u4f7f\u6444\u50cf\u5934\u6ca1\u6709\u63d2\u4e0a\uff0c\u4e5f\u4f1a\u51fa\u73b0\u76f8\u5e94\u7684/dev/video\u8282\u70b9\uff0c\u56e0\u4e3a\uff0c\u82af\u7247\u5df2\u7ecf\u96c6\u6210\u4e86TVIN\u786c\u4ef6\u6a21\u5757\u3002"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"image-20240902112628995",src:e(44905).Z+"",width:"1442",height:"703"})}),"\n",(0,t.jsx)(r.p,{children:"\u786e\u5b9a\u4e86\u6444\u50cf\u5934\u8bbe\u5907\u8282\u70b9/dev/video4\uff0c\u63a5\u4e0b\u6765\u4e00\u6b65\u6b65\u5199\u7a0b\u5e8f\uff0c\u5148\u6253\u5f00\u8bbe\u5907\u3002"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:'#include <sys/ioctl.h>\r\n#include <sys/mman.h>\r\n#include <sys/time.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include <errno.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <sys/stat.h>\r\n#include <time.h>\r\n#include <linux/videodev2.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    /*open /dev/video4*/\r\n    int fd = open("/dev/video4",O_RDWR);\r\n    if (fd < 0)\r\n    {\r\n        perror("open /dev/video4 error");\r\n        return -1;\r\n    }\r\n    \r\n    close(fd);\r\n    printf("> closed /dev/video4\\n");\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(r.h3,{id:"\u83b7\u53d6\u652f\u6301\u683c\u5f0f",children:"\u83b7\u53d6\u652f\u6301\u683c\u5f0f"}),"\n",(0,t.jsxs)(r.p,{children:["\u6253\u5f00\u8bbe\u5907\u6210\u529f\u540e\uff0c\u60f3\u77e5\u9053\u8fd9\u4e2a\u6444\u50cf\u5934\u6240\u652f\u6301\u7684\u683c\u5f0f\u6709\u54ea\u4e9b\uff0c\u8fd9\u91cc\u9700\u8981\u7528\u5230 ioctl \u51fd\u6570\uff0c\u4f20\u5165 ",(0,t.jsx)(r.code,{children:"VIDIOC_ENUM_FMT "})," \u547d\u4ee4\uff0c\u5f97\u5230\u7684\u4fe1\u606f\u5c06\u4f1a\u4fdd\u5b58\u5728\u7ed3\u6784\u4f53 ",(0,t.jsx)(r.code,{children:"struct v4l2_fmtdesc"})," \u91cc\uff0cv4l2_fmtdesc \u6210\u5458\u5982\u4e0b\uff1a"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"index"}),": \u683c\u5f0f\u7f16\u53f7\u7d22\u5f15\uff0c\u7528\u4e8e\u679a\u4e3e\u8bbe\u5907\u652f\u6301\u7684\u591a\u4e2a\u683c\u5f0f\u3002"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"type"}),": \u7f13\u51b2\u533a\u7c7b\u578b\uff0c\u901a\u5e38\u8bbe\u7f6e\u4e3a ",(0,t.jsx)(r.code,{children:"V4L2_BUF_TYPE_VIDEO_CAPTURE"}),"\u3002"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"flags"}),": \u683c\u5f0f\u63cf\u8ff0\u6807\u5fd7\u3002"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"description"}),": \u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u683c\u5f0f\u7684\u63cf\u8ff0\u4fe1\u606f\u3002"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"pixelformat"}),": \u8868\u793a\u56fe\u50cf\u683c\u5f0f\u7684\u56db\u5b57\u7b26\u4ee3\u7801\uff08fourcc\uff09\uff0c\u5982 ",(0,t.jsx)(r.code,{children:"V4L2_PIX_FMT_YUYV"}),"\u3002"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"reserved"}),": \u4fdd\u7559\u5b57\u6bb5\uff0c\u7528\u4e8e\u672a\u6765\u6269\u5c55\u3002"]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:'#include <sys/ioctl.h>\r\n#include <sys/mman.h>\r\n#include <sys/time.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include <errno.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <sys/stat.h>\r\n#include <time.h>\r\n#include <linux/videodev2.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    struct v4l2_fmtdesc fmtdesc;\r\n    \r\n    /*open /dev/video4*/\r\n    int fd = open("/dev/video4",O_RDWR);\r\n    if (fd < 0)\r\n    {\r\n        perror("open /dev/video4 error");\r\n        return -1;\r\n    }\r\n    \r\n    /*Enumerate Camera Formats*/\r\n    memset(&fmtdesc, 0, sizeof(fmtdesc));\r\n    fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    int i = 0;\r\n    while(1)         //\u4ece0\u5f00\u59cb\u6d4b\u8bd5index\u7d22\u5f15\u503c\r\n    {\r\n        fmtdesc.index = i;\r\n        i++;\r\n        int ret = ioctl(fd,VIDIOC_ENUM_FMT,&fmtdesc);\r\n        if (ret < 0)\r\n        {\r\n            perror(" fmtdesc error");\r\n            break;\r\n        }\r\n        printf("> index=%d\\n",fmtdesc.index);\r\n        printf("> flags=%d\\n",fmtdesc.flags);\r\n        printf("> discription=%s\\n",fmtdesc.description);\r\n        unsigned char *p = (unsigned char *)&fmtdesc.pixelformat;\r\n        printf("> pixelformat=%c%c%c%c\\n",p[0],p[1],p[2],p[3]);\r\n        printf("> reserved=%d\\n",fmtdesc.reserved[0]);\r\n    }\r\n    \r\n    close(fd);\r\n    printf("> closed /dev/video4\\n");\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(r.p,{children:"\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"> index=0\r\n> flags=0\r\n> discription=Y/CbCr 4:2:0\r\n> pixelformat=NV12\r\n> reserved=0\r\n> index=1\r\n> flags=0\r\n> discription=Y/CrCb 4:2:0\r\n> pixelformat=NV21\r\n> reserved=0\r\n> index=2\r\n> flags=0\r\n> discription=Y/CbCr 4:2:2\r\n> pixelformat=NV16\r\n> reserved=0\r\n> index=3\r\n> flags=0\r\n> discription=Y/CrCb 4:2:2\r\n> pixelformat=NV61\r\n> reserved=0\r\n> index=4\r\n> flags=0\r\n> discription=planar PACK\r\n> pixelformat=\r\n> reserved=0\r\n fmtdesc error: Invalid argument\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u8bf4\u660e\u8fd9\u4e2a\u6444\u50cf\u5934\u652f\u6301\u56db\u79cd\u683c\u5f0f\u3002"}),"\n",(0,t.jsx)(r.h3,{id:"\u67e5\u8be2\u8bbe\u5907\u80fd\u529b",children:"\u67e5\u8be2\u8bbe\u5907\u80fd\u529b"}),"\n",(0,t.jsxs)(r.p,{children:["\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 ",(0,t.jsx)(r.code,{children:"VIDIOC_QUERYCAP"})," \u6307\u4ee4\uff0c\u914d\u5408 ioctl \u51fd\u6570\uff0c\u67e5\u8be2\u89c6\u9891\u8bbe\u5907\u6709\u54ea\u4e9b\u80fd\u529b\u548c\u7279\u6027\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4fdd\u5b58\u5728\u7ed3\u6784\u4f53 ",(0,t.jsx)(r.code,{children:"v4l2_capability"})," \u91cc\uff0c\u8be5\u7ed3\u6784\u4f53\u7684\u6210\u5458\u5982\u4e0b\uff1a"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"driver[16]"}),'\uff1a\u9a71\u52a8\u6a21\u5757\u7684\u540d\u79f0\uff0c\u4f8b\u5982 "bttv"\u3002']}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"card[32]"}),'\uff1a\u8bbe\u5907\u5361\u7684\u540d\u79f0\uff0c\u4f8b\u5982 "Hauppauge WinTV"\u3002']}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"bus_info[32]"}),'\uff1a\u603b\u7ebf\u4fe1\u606f\uff0c\u4f8b\u5982 "PCI:" \u52a0\u4e0a PCI \u8bbe\u5907\u7684\u540d\u79f0\u3002']}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"version"}),"\uff1a\u5185\u6838\u7248\u672c\u3002"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"capabilities"}),"\uff1a\u8bbe\u5907\u7684\u6574\u4f53\u80fd\u529b\uff0c\u4f8b\u5982\u662f\u5426\u652f\u6301\u89c6\u9891\u6355\u83b7 ",(0,t.jsx)(r.code,{children:"V4L2_CAP_VIDEO_CAPTURE"})," \u6216\u89c6\u9891\u8f93\u51fa ",(0,t.jsx)(r.code,{children:"V4L2_CAP_VIDEO_OUTPUT"}),"\u3002"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"device_caps"}),"\uff1a\u901a\u8fc7\u7279\u5b9a\u8bbe\u5907\uff08\u8282\u70b9\uff09\u8bbf\u95ee\u7684\u80fd\u529b\u3002"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"reserved[3]"}),"\uff1a\u4fdd\u7559\u5b57\u6bb5\u3002"]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:'#include <sys/ioctl.h>\r\n#include <sys/mman.h>\r\n#include <sys/time.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include <errno.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <sys/stat.h>\r\n#include <time.h>\r\n#include <linux/videodev2.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    struct v4l2_fmtdesc fmtdesc;\r\n    struct v4l2_capability cap;\r\n    \r\n    /*open /dev/video4*/\r\n    int fd = open("/dev/video4",O_RDWR);\r\n    if (fd < 0)\r\n    {\r\n        perror("open /dev/video4 error");\r\n        return -1;\r\n    }\r\n    \r\n    /*Enumerate Camera Formats*/\r\n    memset(&fmtdesc, 0, sizeof(fmtdesc));\r\n    fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    int i = 0;\r\n    while(1)         //\u4ece0\u5f00\u59cb\u6d4b\u8bd5index\u7d22\u5f15\u503c\r\n    {\r\n        fmtdesc.index = i;\r\n        i++;\r\n        int ret = ioctl(fd,VIDIOC_ENUM_FMT,&fmtdesc);\r\n        if (ret < 0)\r\n        {\r\n            perror(" fmtdesc error");\r\n            break;\r\n        }\r\n        printf("> index=%d\\n",fmtdesc.index);\r\n        printf("> flags=%d\\n",fmtdesc.flags);\r\n        printf("> discription=%s\\n",fmtdesc.description);\r\n        unsigned char *p = (unsigned char *)&fmtdesc.pixelformat;\r\n        printf("> pixelformat=%c%c%c%c\\n",p[0],p[1],p[2],p[3]);\r\n        printf("> reserved=%d\\n",fmtdesc.reserved[0]);\r\n    }\r\n    \r\n    /*query device capabilities*/\r\n    memset(&cap, 0, sizeof(cap));\r\n\tif (ioctl(fd, VIDIOC_QUERYCAP, &cap) < 0) {\r\n\t\tprintf(" Query device capabilities fail!!!\\n");\r\n\t} else {\r\n\t\tprintf("> Querey device capabilities succeed\\n");\r\n\t\tprintf("> cap.driver=%s\\n", cap.driver);\r\n\t\tprintf("> cap.card=%s\\n", cap.card);\r\n\t\tprintf("> cap.bus_info=%s\\n", cap.bus_info);\r\n\t\tprintf("> cap.version=0x%08x\\n", cap.version);\r\n\t\tprintf("> cap.capabilities=0x%08x\\n", cap.capabilities);\r\n\t}\r\n    \r\n\tif ((cap.capabilities & V4L2_CAP_VIDEO_CAPTURE) >= 0) {\r\n\t\tprintf("> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\\n");\r\n\t}\r\n    \r\n    close(fd);\r\n    printf("> closed /dev/video4\\n");\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(r.p,{children:"\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"> index=0\r\n> flags=0\r\n> discription=Y/CbCr 4:2:0\r\n> pixelformat=NV12\r\n> reserved=0\r\n> index=1\r\n> flags=0\r\n> discription=Y/CrCb 4:2:0\r\n> pixelformat=NV21\r\n> reserved=0\r\n> index=2\r\n> flags=0\r\n> discription=Y/CbCr 4:2:2\r\n> pixelformat=NV16\r\n> reserved=0\r\n> index=3\r\n> flags=0\r\n> discription=Y/CrCb 4:2:2\r\n> pixelformat=NV61\r\n> reserved=0\r\n> index=4\r\n> flags=0\r\n> discription=planar PACK\r\n> pixelformat=\r\n> reserved=0\r\n fmtdesc error: Invalid argument\r\n> Querey device capabilities succeed\r\n> cap.driver=sunxi-tvd\r\n> cap.card=sunxi-tvd\r\n> cap.bus_info=tvd_v4l2_dev0\r\n> cap.version=0x00010000\r\n> cap.capabilities=0x85200001\r\n> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u5982\u679c\u53ea\u662f\u7b80\u5355\u6293\u4e00\u4e0b\u56fe\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u4e0d\u7528\u64cd\u4f5c\u3002"}),"\n",(0,t.jsx)(r.h3,{id:"\u914d\u7f6e\u6444\u50cf\u5934",children:"\u914d\u7f6e\u6444\u50cf\u5934"}),"\n",(0,t.jsxs)(r.p,{children:["\u6211\u4eec\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u6293\u56fe\uff0c\u8fd9\u4e2a\u6444\u50cf\u5934\u7684\u8f93\u5165\u6e90\uff0c\u5e94\u8be5\u8bbe\u7f6e\u4e3a\u76f8\u673a\u7c7b\u578b\uff0c\u628a\u53c2\u6570\u5b58\u5230\u7ed3\u6784\u4f53 ",(0,t.jsx)(r.code,{children:"v4l2_input"})," \u91cc \uff0c\u4f7f\u7528 ",(0,t.jsx)(r.code,{children:"VIDIOC_S_INPUT"})," \u547d\u4ee4\u8bbe\u7f6e\u89c6\u9891\u8bbe\u5907\u7684\u89c6\u9891\u8f93\u5165\u6e90\u3002"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:'#include <sys/ioctl.h>\r\n#include <sys/mman.h>\r\n#include <sys/time.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include <errno.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <sys/stat.h>\r\n#include <time.h>\r\n#include <linux/videodev2.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    struct v4l2_fmtdesc fmtdesc;\r\n    struct v4l2_capability cap;\r\n    struct v4l2_input inp;\r\n    \r\n    /*open /dev/video4*/\r\n    int fd = open("/dev/video4",O_RDWR);\r\n    if (fd < 0)\r\n    {\r\n        perror("open /dev/video4 error");\r\n        return -1;\r\n    }\r\n    \r\n    /*enumerate Camera Formats*/\r\n    memset(&fmtdesc, 0, sizeof(fmtdesc));\r\n    fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    int i = 0;\r\n    while(1)         //\u4ece0\u5f00\u59cb\u6d4b\u8bd5index\u7d22\u5f15\u503c\r\n    {\r\n        fmtdesc.index = i;\r\n        i++;\r\n        int ret = ioctl(fd,VIDIOC_ENUM_FMT,&fmtdesc);\r\n        if (ret < 0)\r\n        {\r\n            perror(" fmtdesc error");\r\n            break;\r\n        }\r\n        printf("> index=%d\\n",fmtdesc.index);\r\n        printf("> flags=%d\\n",fmtdesc.flags);\r\n        printf("> discription=%s\\n",fmtdesc.description);\r\n        unsigned char *p = (unsigned char *)&fmtdesc.pixelformat;\r\n        printf("> pixelformat=%c%c%c%c\\n",p[0],p[1],p[2],p[3]);\r\n        printf("> reserved=%d\\n",fmtdesc.reserved[0]);\r\n    }\r\n    \r\n    /*query device capabilities*/\r\n    memset(&cap, 0, sizeof(cap));\r\n\tif (ioctl(fd, VIDIOC_QUERYCAP, &cap) < 0) {\r\n\t\tprintf(" Query device capabilities fail!!!\\n");\r\n\t} else {\r\n\t\tprintf("> Querey device capabilities succeed\\n");\r\n\t\tprintf("> cap.driver=%s\\n", cap.driver);\r\n\t\tprintf("> cap.card=%s\\n", cap.card);\r\n\t\tprintf("> cap.bus_info=%s\\n", cap.bus_info);\r\n\t\tprintf("> cap.version=0x%08x\\n", cap.version);\r\n\t\tprintf("> cap.capabilities=0x%08x\\n", cap.capabilities);\r\n\t}\r\n    \r\n\tif ((cap.capabilities & V4L2_CAP_VIDEO_CAPTURE) >= 0) {\r\n\t\tprintf("> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\\n");\r\n\t}\r\n    \r\n    /*set input source*/\r\n    memset(&inp, 0, sizeof(inp));\r\n\tinp.index = 0;                       //\u8bbe\u7f6e\u8f93\u5165\u7d22\u5f15\uff0c\u901a\u5e380\u662f\u9ed8\u8ba4\u8f93\u5165\r\n\tinp.type = V4L2_INPUT_TYPE_CAMERA;   //\u8bbe\u7f6e\u8f93\u5165\u7c7b\u578b\uff0c\u8fd9\u91cc\u662f\u76f8\u673a\r\n\tif (ioctl(fd, VIDIOC_S_INPUT, &inp) < 0) {\r\n\t\tprintf(" VIDIOC_S_INPUT failed! s_input: %d\\n", inp.index);\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> select the current video input successfully!\\n");\r\n    }\r\n    \r\n    \r\n    close(fd);\r\n    printf("> closed /dev/video4\\n");\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsxs)(r.p,{children:["\u60f3\u6293\u53d6\u4ec0\u4e48\u6837\u7684\u56fe\u7247\u6570\u636e\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u8fdb\u4e00\u6b65\u8bbe\u7f6e\u76f8\u5e94\u7684\u683c\u5f0f\uff0c\u628a\u53c2\u6570\u50a8\u5b58\u5728\u7ed3\u6784\u4f53 ",(0,t.jsx)(r.code,{children:"v4l2_format"})," \u91cc\uff0c\u4f7f\u7528 ",(0,t.jsx)(r.code,{children:"VIDIOC_S_FMT"})," \u6307\u4ee4\uff0c\u8bbe\u7f6e\u89c6\u9891\u6355\u83b7\u8bbe\u5907\u7684\u89c6\u9891\u683c\u5f0f\u3002\u6709\u54ea\u4e9b\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u5462\uff1f"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:"struct v4l2_format {\r\n    enum v4l2_buf_type type;  // \u89c6\u9891\u6d41\u7684\u7c7b\u578b\uff0c\u5982 V4L2_BUF_TYPE_VIDEO_CAPTURE\r\n\r\n    union {\r\n        struct v4l2_pix_format      pix;      // \u56fe\u50cf\u6570\u636e\u683c\u5f0f\uff08\u7528\u4e8e\u56fe\u50cf\u6355\u83b7\uff09\r\n        struct v4l2_pix_format_mplane pix_mp; // \u591a\u5e73\u9762\u56fe\u50cf\u6570\u636e\u683c\u5f0f\uff08\u7528\u4e8e\u56fe\u50cf\u6355\u83b7\uff09\r\n        struct v4l2_window           win;     // \u89c6\u9891\u7a97\u53e3\uff08\u7528\u4e8e\u89c6\u9891\u53e0\u52a0\uff09\r\n        struct v4l2_vbi_format       vbi;     // VBI \u6570\u636e\u683c\u5f0f\uff08\u7528\u4e8e VBI \u6355\u83b7\uff09\r\n        struct v4l2_sliced_vbi_format sliced; // \u5206\u7247 VBI \u6570\u636e\u683c\u5f0f\uff08\u7528\u4e8e\u5206\u7247 VBI \u6355\u83b7\uff09\r\n        __u8 raw_data[200];                   // \u7528\u4e8e\u7528\u6237\u5b9a\u4e49\u7684\u683c\u5f0f\r\n    } fmt;\r\n};\n"})}),"\n",(0,t.jsxs)(r.p,{children:["\u5b9e\u73b0\u6293\u56fe\uff0c\u6700\u4e3b\u8981\u8bbe\u7f6e\u5176\u6210\u5458\u4e2d\u7684\u7ed3\u6784\u4f53 ",(0,t.jsx)(r.code,{children:"v4l2_pix_format"})," \uff0c\u5176\u6210\u5458\u6709\uff1a"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:"struct v4l2_pix_format {\r\n    __u32          width;        // \u56fe\u50cf\u5bbd\u5ea6\r\n    __u32          height;       // \u56fe\u50cf\u9ad8\u5ea6\r\n    __u32          pixelformat;  // \u50cf\u7d20\u683c\u5f0f\r\n    __u32          field;        // \u56fe\u50cf\u573a\r\n    __u32          bytesperline; // \u6bcf\u884c\u7684\u5b57\u8282\u6570\r\n    __u32          sizeimage;    // \u56fe\u50cf\u7684\u603b\u5b57\u8282\u6570\r\n    __u32          colorspace;   // \u989c\u8272\u7a7a\u95f4\r\n    __u32          priv;         // \u79c1\u6709\u6570\u636e\r\n    __u32          flags;        // \u6807\u5fd7\r\n    __u32          ycbcr_enc;    // YCbCr \u7f16\u7801\r\n    __u32          hsv_enc;      // HSV \u7f16\u7801\r\n    __u32          quantization; // \u91cf\u5316\r\n    __u32          xeight;       // X \u8f74\u7684\u6269\u5c55\u9ad8\u5ea6\r\n};\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u6dfb\u52a0\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:'#include <sys/ioctl.h>\r\n#include <sys/mman.h>\r\n#include <sys/time.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include <errno.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <sys/stat.h>\r\n#include <time.h>\r\n#include <linux/videodev2.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    struct v4l2_fmtdesc fmtdesc;\r\n    struct v4l2_capability cap;\r\n    struct v4l2_input inp;\r\n    struct v4l2_format fmt;\r\n    \r\n    /*open /dev/video4*/\r\n    int fd = open("/dev/video4",O_RDWR);\r\n    if (fd < 0)\r\n    {\r\n        perror("open /dev/video4 error");\r\n        return -1;\r\n    }\r\n    \r\n    /*enumerate Camera Formats*/\r\n    memset(&fmtdesc, 0, sizeof(fmtdesc));\r\n    fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    int i = 0;\r\n    while(1)         //\u4ece0\u5f00\u59cb\u6d4b\u8bd5index\u7d22\u5f15\u503c\r\n    {\r\n        fmtdesc.index = i;\r\n        i++;\r\n        int ret = ioctl(fd,VIDIOC_ENUM_FMT,&fmtdesc);\r\n        if (ret < 0)\r\n        {\r\n            perror(" fmtdesc error");\r\n            break;\r\n        }\r\n        printf("> index=%d\\n",fmtdesc.index);\r\n        printf("> flags=%d\\n",fmtdesc.flags);\r\n        printf("> discription=%s\\n",fmtdesc.description);\r\n        unsigned char *p = (unsigned char *)&fmtdesc.pixelformat;\r\n        printf("> pixelformat=%c%c%c%c\\n",p[0],p[1],p[2],p[3]);\r\n        printf("> reserved=%d\\n",fmtdesc.reserved[0]);\r\n    }\r\n    \r\n    /*query device capabilities*/\r\n    memset(&cap, 0, sizeof(cap));\r\n\tif (ioctl(fd, VIDIOC_QUERYCAP, &cap) < 0) {\r\n\t\tprintf(" Query device capabilities fail!!!\\n");\r\n\t} else {\r\n\t\tprintf("> Querey device capabilities succeed\\n");\r\n\t\tprintf("> cap.driver=%s\\n", cap.driver);\r\n\t\tprintf("> cap.card=%s\\n", cap.card);\r\n\t\tprintf("> cap.bus_info=%s\\n", cap.bus_info);\r\n\t\tprintf("> cap.version=0x%08x\\n", cap.version);\r\n\t\tprintf("> cap.capabilities=0x%08x\\n", cap.capabilities);\r\n\t}\r\n    \r\n\tif ((cap.capabilities & V4L2_CAP_VIDEO_CAPTURE) >= 0) {\r\n\t\tprintf("> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\\n");\r\n\t}\r\n    \r\n    /*set input source*/\r\n    memset(&inp, 0, sizeof(inp));\r\n\tinp.index = 0;                       //\u8bbe\u7f6e\u8f93\u5165\u7d22\u5f15\uff0c\u901a\u5e380\u662f\u9ed8\u8ba4\u8f93\u5165\r\n\tinp.type = V4L2_INPUT_TYPE_CAMERA;   //\u8bbe\u7f6e\u8f93\u5165\u7c7b\u578b\uff0c\u8fd9\u91cc\u662f\u76f8\u673a\r\n\tif (ioctl(fd, VIDIOC_S_INPUT, &inp) < 0) {\r\n\t\tprintf(" VIDIOC_S_INPUT failed! s_input: %d\\n", inp.index);\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> select the current video input successfully!\\n");\r\n    }\r\n    \r\n    /*set input format*/\r\n    width  = 720;\r\n    height = 480;\r\n\r\n    memset(&fmt, 0, sizeof(struct v4l2_format));\r\n    fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    fmt.fmt.pix.width = width;\r\n    fmt.fmt.pix.height = height;\r\n    fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_NV21;\r\n    fmt.fmt.pix.field = V4L2_FIELD_NONE;\r\n\r\n    char fourcc[5];\r\n\r\n    if (ioctl(fd, VIDIOC_S_FMT, &fmt) < 0) {\r\n\t\tprintf(" setting the data format failed!\\n");\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> VIDIOC_S_FMT succeed\\n");\r\n\t\tprintf("> fmt.type = %d\\n", fmt.type);\r\n\t\tprintf("> fmt.fmt.pix.width = %d\\n", fmt.fmt.pix.width);\r\n\t\tprintf("> fmt.fmt.pix.height = %d\\n", fmt.fmt.pix.height);\r\n\t\tprintf("> fmt.fmt.pix.field = %d\\n", fmt.fmt.pix.field);\r\n        sprintf(fourcc, "%c%c%c%c", \r\n        ((fmt.fmt.pix.pixelformat >> 0) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 8) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 16) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 24) & 0xff));\r\n        printf("> The pixel format fourcc is: %s\\n", fourcc);\r\n    }\r\n    \r\n    close(fd);\r\n    printf("> closed /dev/video4\\n");\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(r.p,{children:"\u8fd0\u884c\u7ed3\u679c\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"> index=0\r\n> flags=0\r\n> discription=Y/CbCr 4:2:0\r\n> pixelformat=NV12\r\n> reserved=0\r\n> index=1\r\n> flags=0\r\n> discription=Y/CrCb 4:2:0\r\n> pixelformat=NV21\r\n> reserved=0\r\n> index=2\r\n> flags=0\r\n> discription=Y/CbCr 4:2:2\r\n> pixelformat=NV16\r\n> reserved=0\r\n> index=3\r\n> flags=0\r\n> discription=Y/CrCb 4:2:2\r\n> pixelformat=NV61\r\n> reserved=0\r\n> index=4\r\n> flags=0\r\n> discription=planar PACK\r\n> pixelformat=\r\n> reserved=0\r\n fmtdesc error: Invalid argument\r\n> Querey device capabilities succeed\r\n> cap.driver=sunxi-tvd\r\n> cap.card=sunxi-tvd\r\n> cap.bus_info=tvd_v4l2_dev0\r\n> cap.version=0x00010000\r\n> cap.capabilities=0x85200001\r\n> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\r\n> select the current video input successfully!\r\n> VIDIOC_S_FMT succeed\r\n> fmt.type = 1\r\n> fmt.fmt.pix.width = 720\r\n> fmt.fmt.pix.height = 480\r\n> fmt.fmt.pix.field = 1\r\n> The pixel format fourcc is: NV21\n"})}),"\n",(0,t.jsx)(r.h3,{id:"\u7533\u8bf7\u5185\u6838\u7f13\u51b2\u533a",children:"\u7533\u8bf7\u5185\u6838\u7f13\u51b2\u533a"}),"\n",(0,t.jsxs)(r.p,{children:["\u4e3a\u4e86\u5728\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u4e4b\u95f4\u9ad8\u6548\u5730\u4f20\u8f93\u6570\u636e\uff0c\u4f7f\u7528 ",(0,t.jsx)(r.code,{children:"VIDIOC_REQBUFS"})," \u547d\u4ee4\u7533\u8bf7\u5185\u6838\u7f13\u51b2\u533a\uff0c\u6307\u5b9a\u7f13\u51b2\u533a\u7684\u6570\u91cf\u3001\u7f13\u51b2\u533a\u7684\u7c7b\u578b\u548c\u7f13\u51b2\u533a\u7684\u5185\u5b58\u7c7b\u578b\uff0c\u8fd9\u4e9b\u53c2\u6570\u4fdd\u5b58\u5728\u7ed3\u6784\u4f53",(0,t.jsx)(r.code,{children:"v4l2_requestbuffers"})," \u3002"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:'#include <sys/ioctl.h>\r\n#include <sys/mman.h>\r\n#include <sys/time.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include <errno.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <sys/stat.h>\r\n#include <time.h>\r\n#include <linux/videodev2.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    struct v4l2_fmtdesc fmtdesc;\r\n    struct v4l2_capability cap;\r\n    struct v4l2_input inp;\r\n    struct v4l2_format fmt;\r\n    struct v4l2_requestbuffers req;\r\n    \r\n    /*open /dev/video4*/\r\n    int fd = open("/dev/video4",O_RDWR);\r\n    if (fd < 0)\r\n    {\r\n        perror("open /dev/video4 error");\r\n        return -1;\r\n    }\r\n    \r\n    /*enumerate Camera Formats*/\r\n    memset(&fmtdesc, 0, sizeof(fmtdesc));\r\n    fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    int i = 0;\r\n    while(1)         //\u4ece0\u5f00\u59cb\u6d4b\u8bd5index\u7d22\u5f15\u503c\r\n    {\r\n        fmtdesc.index = i;\r\n        i++;\r\n        int ret = ioctl(fd,VIDIOC_ENUM_FMT,&fmtdesc);\r\n        if (ret < 0)\r\n        {\r\n            perror(" fmtdesc error");\r\n            break;\r\n        }\r\n        printf("> index=%d\\n",fmtdesc.index);\r\n        printf("> flags=%d\\n",fmtdesc.flags);\r\n        printf("> discription=%s\\n",fmtdesc.description);\r\n        unsigned char *p = (unsigned char *)&fmtdesc.pixelformat;\r\n        printf("> pixelformat=%c%c%c%c\\n",p[0],p[1],p[2],p[3]);\r\n        printf("> reserved=%d\\n",fmtdesc.reserved[0]);\r\n    }\r\n    \r\n    /*query device capabilities*/\r\n    memset(&cap, 0, sizeof(cap));\r\n\tif (ioctl(fd, VIDIOC_QUERYCAP, &cap) < 0) {\r\n\t\tprintf(" Query device capabilities fail!!!\\n");\r\n\t} else {\r\n\t\tprintf("> Querey device capabilities succeed\\n");\r\n\t\tprintf("> cap.driver=%s\\n", cap.driver);\r\n\t\tprintf("> cap.card=%s\\n", cap.card);\r\n\t\tprintf("> cap.bus_info=%s\\n", cap.bus_info);\r\n\t\tprintf("> cap.version=0x%08x\\n", cap.version);\r\n\t\tprintf("> cap.capabilities=0x%08x\\n", cap.capabilities);\r\n\t}\r\n    \r\n\tif ((cap.capabilities & V4L2_CAP_VIDEO_CAPTURE) >= 0) {\r\n\t\tprintf("> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\\n");\r\n\t}\r\n    \r\n    /*set input source*/\r\n    memset(&inp, 0, sizeof(inp));\r\n\tinp.index = 0;                       //\u8bbe\u7f6e\u8f93\u5165\u7d22\u5f15\uff0c\u901a\u5e380\u662f\u9ed8\u8ba4\u8f93\u5165\r\n\tinp.type = V4L2_INPUT_TYPE_CAMERA;   //\u8bbe\u7f6e\u8f93\u5165\u7c7b\u578b\uff0c\u8fd9\u91cc\u662f\u76f8\u673a\r\n\tif (ioctl(fd, VIDIOC_S_INPUT, &inp) < 0) {\r\n\t\tprintf(" VIDIOC_S_INPUT failed! s_input: %d\\n", inp.index);\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> select the current video input successfully!\\n");\r\n    }\r\n    \r\n    /*set input format*/\r\n    width  = 720;\r\n    height = 480;\r\n\r\n    memset(&fmt, 0, sizeof(struct v4l2_format));\r\n    fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    fmt.fmt.pix.width = width;\r\n    fmt.fmt.pix.height = height;\r\n    fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_NV21;\r\n    fmt.fmt.pix.field = V4L2_FIELD_NONE;\r\n\r\n    char fourcc[5];\r\n\r\n    if (ioctl(fd, VIDIOC_S_FMT, &fmt) < 0) {\r\n\t\tprintf(" setting the data format failed!\\n");\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> VIDIOC_S_FMT succeed\\n");\r\n\t\tprintf("> fmt.type = %d\\n", fmt.type);\r\n\t\tprintf("> fmt.fmt.pix.width = %d\\n", fmt.fmt.pix.width);\r\n\t\tprintf("> fmt.fmt.pix.height = %d\\n", fmt.fmt.pix.height);\r\n\t\tprintf("> fmt.fmt.pix.field = %d\\n", fmt.fmt.pix.field);\r\n        sprintf(fourcc, "%c%c%c%c", \r\n        ((fmt.fmt.pix.pixelformat >> 0) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 8) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 16) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 24) & 0xff));\r\n        printf("> The pixel format fourcc is: %s\\n", fourcc);\r\n    }\r\n    \r\n    /*request for a kernel buffer*/\r\n    memset(&req, 0, sizeof(struct v4l2_requestbuffers));\r\n    req.count = 3;                             //\u7f13\u51b2\u533a\u6570\u91cf\r\n    req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;    //\u7f13\u51b2\u533a\u7c7b\u578b\r\n    req.memory = V4L2_MEMORY_MMAP;             //\u7f13\u51b2\u533a\u5185\u5b58\u7c7b\u578b\r\n    if (ioctl(fd, VIDIOC_REQBUFS, &req) < 0) {\r\n\t\tprintf("> VIDIOC_REQBUFS failed\\n");\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> request buffer sccessfully!\\n");\r\n    }\r\n\r\n    int buf_count = req.count;\r\n    printf("> buf_count is : %d\\n",buf_count);  \r\n    \r\n    \r\n    close(fd);\r\n    printf("> closed /dev/video4\\n");\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(r.p,{children:"\u6210\u529f\u7533\u8bf7\u5230\u5185\u6838buffer\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"> index=0\r\n> flags=0\r\n> discription=Y/CbCr 4:2:0\r\n> pixelformat=NV12\r\n> reserved=0\r\n> index=1\r\n> flags=0\r\n> discription=Y/CrCb 4:2:0\r\n> pixelformat=NV21\r\n> reserved=0\r\n> index=2\r\n> flags=0\r\n> discription=Y/CbCr 4:2:2\r\n> pixelformat=NV16\r\n> reserved=0\r\n> index=3\r\n> flags=0\r\n> discription=Y/CrCb 4:2:2\r\n> pixelformat=NV61\r\n> reserved=0\r\n> index=4\r\n> flags=0\r\n> discription=planar PACK\r\n> pixelformat=\r\n> reserved=0\r\n fmtdesc error: Invalid argument\r\n> Querey device capabilities succeed\r\n> cap.driver=sunxi-tvd\r\n> cap.card=sunxi-tvd\r\n> cap.bus_info=tvd_v4l2_dev0\r\n> cap.version=0x00010000\r\n> cap.capabilities=0x85200001\r\n> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\r\n> select the current video input successfully!\r\n> VIDIOC_S_FMT succeed\r\n> fmt.type = 1\r\n> fmt.fmt.pix.width = 720\r\n> fmt.fmt.pix.height = 480\r\n> fmt.fmt.pix.field = 1\r\n> The pixel format fourcc is: NV21\r\n> request buffer sccessfully!\r\n> buf_count is : 3\n"})}),"\n",(0,t.jsx)(r.h3,{id:"\u6620\u5c04\u5185\u6838\u7f13\u51b2\u533a",children:"\u6620\u5c04\u5185\u6838\u7f13\u51b2\u533a"}),"\n",(0,t.jsx)(r.p,{children:"\u8bf7\u6c42\u5185\u6838\u7f13\u51b2\u533a\u6210\u529f\u540e\uff0c\u9700\u8981\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u7f13\u51b2\u533a\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5305\u62ec\u67e5\u8be2\u7f13\u51b2\u533a\u4fe1\u606f\uff0c\u5185\u5b58\u6620\u5c04\u548c\u6392\u961f\u7f13\u51b2\u533a\u3002\u8fd9\u662f\u6293\u56fe\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u6b65\u9aa4\uff0c\u786e\u4fdd\u7f13\u51b2\u533a\u51c6\u5907\u597d\u5e76\u53ef\u4ee5\u88ab\u5185\u6838\u4f7f\u7528\u3002"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:'#include <sys/ioctl.h>\r\n#include <sys/mman.h>\r\n#include <sys/time.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include <errno.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <sys/stat.h>\r\n#include <time.h>\r\n#include <linux/videodev2.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <stdio.h>\r\n\r\nstruct buffer{\r\n    unsigned char *start[3];\r\n    unsigned int length[3];\r\n};\r\n\r\nint main()\r\n{\r\n    struct v4l2_fmtdesc fmtdesc;\r\n    struct v4l2_capability cap;\r\n    struct v4l2_input inp;\r\n    struct v4l2_format fmt;\r\n    struct v4l2_requestbuffers req;\r\n    struct v4l2_buffer buf;\r\n    \r\n    /*open /dev/video4*/\r\n    int fd = open("/dev/video4",O_RDWR);\r\n    if (fd < 0)\r\n    {\r\n        perror("open /dev/video4 error");\r\n        return -1;\r\n    }\r\n    \r\n    /*enumerate Camera Formats*/\r\n    memset(&fmtdesc, 0, sizeof(fmtdesc));\r\n    fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    int i = 0;\r\n    while(1)         //\u4ece0\u5f00\u59cb\u6d4b\u8bd5index\u7d22\u5f15\u503c\r\n    {\r\n        fmtdesc.index = i;\r\n        i++;\r\n        int ret = ioctl(fd,VIDIOC_ENUM_FMT,&fmtdesc);\r\n        if (ret < 0)\r\n        {\r\n            perror(" fmtdesc error");\r\n            break;\r\n        }\r\n        printf("> index=%d\\n",fmtdesc.index);\r\n        printf("> flags=%d\\n",fmtdesc.flags);\r\n        printf("> discription=%s\\n",fmtdesc.description);\r\n        unsigned char *p = (unsigned char *)&fmtdesc.pixelformat;\r\n        printf("> pixelformat=%c%c%c%c\\n",p[0],p[1],p[2],p[3]);\r\n        printf("> reserved=%d\\n",fmtdesc.reserved[0]);\r\n    }\r\n    \r\n    /*query device capabilities*/\r\n    memset(&cap, 0, sizeof(cap));\r\n\tif (ioctl(fd, VIDIOC_QUERYCAP, &cap) < 0) {\r\n\t\tprintf(" Query device capabilities fail!!!\\n");\r\n\t} else {\r\n\t\tprintf("> Querey device capabilities succeed\\n");\r\n\t\tprintf("> cap.driver=%s\\n", cap.driver);\r\n\t\tprintf("> cap.card=%s\\n", cap.card);\r\n\t\tprintf("> cap.bus_info=%s\\n", cap.bus_info);\r\n\t\tprintf("> cap.version=0x%08x\\n", cap.version);\r\n\t\tprintf("> cap.capabilities=0x%08x\\n", cap.capabilities);\r\n\t}\r\n    \r\n\tif ((cap.capabilities & V4L2_CAP_VIDEO_CAPTURE) >= 0) {\r\n\t\tprintf("> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\\n");\r\n\t}\r\n    \r\n    /*set input source*/\r\n    memset(&inp, 0, sizeof(inp));\r\n\tinp.index = 0;                       //\u8bbe\u7f6e\u8f93\u5165\u7d22\u5f15\uff0c\u901a\u5e380\u662f\u9ed8\u8ba4\u8f93\u5165\r\n\tinp.type = V4L2_INPUT_TYPE_CAMERA;   //\u8bbe\u7f6e\u8f93\u5165\u7c7b\u578b\uff0c\u8fd9\u91cc\u662f\u76f8\u673a\r\n\tif (ioctl(fd, VIDIOC_S_INPUT, &inp) < 0) {\r\n\t\tprintf(" VIDIOC_S_INPUT failed! s_input: %d\\n", inp.index);\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> select the current video input successfully!\\n");\r\n    }\r\n    \r\n    /*set input format*/\r\n    width  = 720;\r\n    height = 480;\r\n\r\n    memset(&fmt, 0, sizeof(struct v4l2_format));\r\n    fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    fmt.fmt.pix.width = width;\r\n    fmt.fmt.pix.height = height;\r\n    fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_NV21;\r\n    fmt.fmt.pix.field = V4L2_FIELD_NONE;\r\n\r\n    char fourcc[5];\r\n\r\n    if (ioctl(fd, VIDIOC_S_FMT, &fmt) < 0) {\r\n\t\tprintf(" setting the data format failed!\\n");\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> VIDIOC_S_FMT succeed\\n");\r\n\t\tprintf("> fmt.type = %d\\n", fmt.type);\r\n\t\tprintf("> fmt.fmt.pix.width = %d\\n", fmt.fmt.pix.width);\r\n\t\tprintf("> fmt.fmt.pix.height = %d\\n", fmt.fmt.pix.height);\r\n\t\tprintf("> fmt.fmt.pix.field = %d\\n", fmt.fmt.pix.field);\r\n        sprintf(fourcc, "%c%c%c%c", \r\n        ((fmt.fmt.pix.pixelformat >> 0) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 8) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 16) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 24) & 0xff));\r\n        printf("> The pixel format fourcc is: %s\\n", fourcc);\r\n    }\r\n    \r\n    /*request for a kernel buffer*/\r\n    memset(&req, 0, sizeof(struct v4l2_requestbuffers));\r\n    req.count = 3;                             //\u7f13\u51b2\u533a\u6570\u91cf\r\n    req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;    //\u7f13\u51b2\u533a\u7c7b\u578b\r\n    req.memory = V4L2_MEMORY_MMAP;             //\u7f13\u51b2\u533a\u5185\u5b58\u7c7b\u578b\r\n    if (ioctl(fd, VIDIOC_REQBUFS, &req) < 0) {\r\n\t\tprintf("> VIDIOC_REQBUFS failed\\n");\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> request buffer sccessfully!\\n");\r\n    }\r\n\r\n    int buf_count = req.count;\r\n    printf("> buf_count is : %d\\n",buf_count);\r\n    \r\n    \r\n    /*map kernel buffer*/\r\n    struct buffer *buffers = calloc(buf_count,sizeof(struct buffer));\r\n\r\n    for(i = 0; i < buf_count; i++)\r\n    {\r\n        buf.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n        buf.index  = i;\r\n        buf.memory = V4L2_MEMORY_MMAP;\r\n\r\n        if(ioctl(fd, VIDIOC_QUERYBUF, &buf) == -1)\r\n        {\r\n            printf("> VIDIOC_QUERYBUF error\\n");\r\n            free(buffers);\r\n            close(fd);\r\n\r\n            return -1;\r\n        }\r\n\r\n        buffers[i].length[0] = buf.length;\r\n        buffers[i].start[0]  = (unsigned char *)mmap(NULL ,buf.length ,PROT_READ | PROT_WRITE ,MAP_SHARED ,fd ,buf.m.offset);\r\n        printf("> map buffer index: %d, mem: %p, len: %x, offset: %x\\n", \\\r\n\t\t\t\t\ti, buffers[i].start[0], buf.length, buf.m.offset); \r\n\r\n        if(ioctl(fd,VIDIOC_QBUF,&buf) < 0)\r\n        {\r\n            printf("> Failed to queue buf\\n");\r\n        } \r\n    }\r\n    \r\n    \r\n    close(fd);\r\n    printf("> closed /dev/video4\\n");\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(r.p,{children:"\u6210\u529f\u8fd0\u884c\u5982\u4e0b\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"> index=0\r\n> flags=0\r\n> discription=Y/CbCr 4:2:0\r\n> pixelformat=NV12\r\n> reserved=0\r\n> index=1\r\n> flags=0\r\n> discription=Y/CrCb 4:2:0\r\n> pixelformat=NV21\r\n> reserved=0\r\n> index=2\r\n> flags=0\r\n> discription=Y/CbCr 4:2:2\r\n> pixelformat=NV16\r\n> reserved=0\r\n> index=3\r\n> flags=0\r\n> discription=Y/CrCb 4:2:2\r\n> pixelformat=NV61\r\n> reserved=0\r\n> index=4\r\n> flags=0\r\n> discription=planar PACK\r\n> pixelformat=\r\n> reserved=0\r\n fmtdesc error: Invalid argument\r\n> Querey device capabilities succeed\r\n> cap.driver=sunxi-tvd\r\n> cap.card=sunxi-tvd\r\n> cap.bus_info=tvd_v4l2_dev0\r\n> cap.version=0x00010000\r\n> cap.capabilities=0x85200001\r\n> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\r\n> select the current video input successfully!\r\n> VIDIOC_S_FMT succeed\r\n> fmt.type = 1\r\n> fmt.fmt.pix.width = 720\r\n> fmt.fmt.pix.height = 480\r\n> fmt.fmt.pix.field = 1\r\n> The pixel format fourcc is: NV21\r\n> request buffer sccessfully!\r\n> buf_count is : 3\r\n> map buffer index: 0, mem: 0xb6e0b000, len: 7e900, offset: 0\r\n> map buffer index: 1, mem: 0xb6d8c000, len: 7e900, offset: 7f000\r\n> map buffer index: 2, mem: 0xb6d0d000, len: 7e900, offset: fe000\n"})}),"\n",(0,t.jsx)(r.h3,{id:"\u91c7\u96c6\u6570\u636e",children:"\u91c7\u96c6\u6570\u636e"}),"\n",(0,t.jsx)(r.p,{children:"\u505a\u597d\u4ee5\u4e0a\u76f8\u5e94\u7684\u51c6\u5907\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u91c7\u96c6\u6bcf\u4e00\u5e27\u7684\u6570\u636e\uff0c\u4e00\u5e27\u901a\u5e38\u6307\u7684\u662f\u89c6\u9891\u6d41\u4e2d\u7684\u5355\u4e2a\u9759\u6001\u56fe\u50cf\uff0c\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u5f20\u56fe\u7247\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u91c7\u96c6\u7684\u6d41\u7a0b\uff1a"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"VIDIOC_STREAMON \uff1a\u5f00\u59cb\u91c7\u96c6\u6570\u636e\u5230\u7f13\u51b2\u533a"}),"\n",(0,t.jsx)(r.li,{children:"VIDIOC_DQBUF \uff1a\u83b7\u53d6\u4e00\u4e2a\u91c7\u96c6\u5b8c\u6570\u636e\u7684\u7f13\u51b2\u533a(\u6ca1\u91c7\u96c6\u5b8c\u65f6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u91c7\u96c6\u5b8c\u6bd5)"}),"\n",(0,t.jsx)(r.li,{children:"VIDIOC_QBUF \uff1a\u5c06\u4e00\u4e2a\u7f13\u51b2\u533a\u6807\u8bb0\u4e3a\u7a7a\u95f2\u5e76\u91cd\u65b0\u6392\u961f"}),"\n",(0,t.jsx)(r.li,{children:"VIDIOC_STREAMOFF \uff1a\u6e05\u9664\u6240\u6709\u5f53\u524d\u6392\u961f\u7684\u7f13\u51b2\u533a\uff0c\u5e76\u505c\u6b62\u8bbe\u5907\u7684\u6570\u636e\u6d41"}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-c",children:'#include <sys/ioctl.h>\r\n#include <sys/mman.h>\r\n#include <sys/time.h>\r\n#include <fcntl.h>\r\n#include <unistd.h>\r\n#include <string.h>\r\n#include <errno.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <sys/stat.h>\r\n#include <time.h>\r\n#include <linux/videodev2.h>\r\n#include <pthread.h>\r\n#include <semaphore.h>\r\n#include <ctype.h>\r\n#include <errno.h>\r\n#include <stdio.h>\r\n\r\n#include "convert.h"\r\n\r\nstruct buffer{\r\n    unsigned char *start[3];\r\n    unsigned int length[3];\r\n};\r\n\r\nstatic long long secs_to_msecs(long secs, long usecs)\r\n{\r\n\tlong long msecs;\r\n\r\n\tmsecs = ((long long)usecs) / 1000 + ((long long)secs) * 1000;\r\n\r\n\treturn msecs;\r\n}\r\n\r\nint main()\r\n{\r\n    struct v4l2_fmtdesc fmtdesc;\r\n    struct v4l2_capability cap;\r\n    struct v4l2_input inp;\r\n    struct v4l2_format fmt;\r\n    struct v4l2_requestbuffers req;\r\n    struct v4l2_buffer buf;\r\n    \r\n    /*open /dev/video4*/\r\n    int fd = open("/dev/video4",O_RDWR);\r\n    if (fd < 0)\r\n    {\r\n        perror("open /dev/video4 error");\r\n        return -1;\r\n    }\r\n    \r\n    /*enumerate Camera Formats*/\r\n    memset(&fmtdesc, 0, sizeof(fmtdesc));\r\n    fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    int i = 0;\r\n    while(1)         //\u4ece0\u5f00\u59cb\u6d4b\u8bd5index\u7d22\u5f15\u503c\r\n    {\r\n        fmtdesc.index = i;\r\n        i++;\r\n        int ret = ioctl(fd,VIDIOC_ENUM_FMT,&fmtdesc);\r\n        if (ret < 0)\r\n        {\r\n            perror(" fmtdesc error");\r\n            break;\r\n        }\r\n        printf("> index=%d\\n",fmtdesc.index);\r\n        printf("> flags=%d\\n",fmtdesc.flags);\r\n        printf("> discription=%s\\n",fmtdesc.description);\r\n        unsigned char *p = (unsigned char *)&fmtdesc.pixelformat;\r\n        printf("> pixelformat=%c%c%c%c\\n",p[0],p[1],p[2],p[3]);\r\n        printf("> reserved=%d\\n",fmtdesc.reserved[0]);\r\n    }\r\n    \r\n    /*query device capabilities*/\r\n    memset(&cap, 0, sizeof(cap));\r\n\tif (ioctl(fd, VIDIOC_QUERYCAP, &cap) < 0) {\r\n\t\tprintf(" Query device capabilities fail!!!\\n");\r\n\t} else {\r\n\t\tprintf("> Querey device capabilities succeed\\n");\r\n\t\tprintf("> cap.driver=%s\\n", cap.driver);\r\n\t\tprintf("> cap.card=%s\\n", cap.card);\r\n\t\tprintf("> cap.bus_info=%s\\n", cap.bus_info);\r\n\t\tprintf("> cap.version=0x%08x\\n", cap.version);\r\n\t\tprintf("> cap.capabilities=0x%08x\\n", cap.capabilities);\r\n\t}\r\n    \r\n\tif ((cap.capabilities & V4L2_CAP_VIDEO_CAPTURE) >= 0) {\r\n\t\tprintf("> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\\n");\r\n\t}\r\n    \r\n    /*set input source*/\r\n    memset(&inp, 0, sizeof(inp));\r\n\tinp.index = 0;                       //\u8bbe\u7f6e\u8f93\u5165\u7d22\u5f15\uff0c\u901a\u5e380\u662f\u9ed8\u8ba4\u8f93\u5165\r\n\tinp.type = V4L2_INPUT_TYPE_CAMERA;   //\u8bbe\u7f6e\u8f93\u5165\u7c7b\u578b\uff0c\u8fd9\u91cc\u662f\u76f8\u673a\r\n\tif (ioctl(fd, VIDIOC_S_INPUT, &inp) < 0) {\r\n\t\tprintf(" VIDIOC_S_INPUT failed! s_input: %d\\n", inp.index);\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> select the current video input successfully!\\n");\r\n    }\r\n    \r\n    /*set input format*/\r\n    width  = 720;\r\n    height = 480;\r\n\r\n    memset(&fmt, 0, sizeof(struct v4l2_format));\r\n    fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    fmt.fmt.pix.width = width;\r\n    fmt.fmt.pix.height = height;\r\n    fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_NV21;\r\n    fmt.fmt.pix.field = V4L2_FIELD_NONE;\r\n\r\n    char fourcc[5];\r\n\r\n    if (ioctl(fd, VIDIOC_S_FMT, &fmt) < 0) {\r\n\t\tprintf(" setting the data format failed!\\n");\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> VIDIOC_S_FMT succeed\\n");\r\n\t\tprintf("> fmt.type = %d\\n", fmt.type);\r\n\t\tprintf("> fmt.fmt.pix.width = %d\\n", fmt.fmt.pix.width);\r\n\t\tprintf("> fmt.fmt.pix.height = %d\\n", fmt.fmt.pix.height);\r\n\t\tprintf("> fmt.fmt.pix.field = %d\\n", fmt.fmt.pix.field);\r\n        sprintf(fourcc, "%c%c%c%c", \r\n        ((fmt.fmt.pix.pixelformat >> 0) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 8) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 16) & 0xff),\r\n        ((fmt.fmt.pix.pixelformat >> 24) & 0xff));\r\n        printf("> The pixel format fourcc is: %s\\n", fourcc);\r\n    }\r\n    \r\n    /*request for a kernel buffer*/\r\n    memset(&req, 0, sizeof(struct v4l2_requestbuffers));\r\n    req.count = 3;                             //\u7f13\u51b2\u533a\u6570\u91cf\r\n    req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;    //\u7f13\u51b2\u533a\u7c7b\u578b\r\n    req.memory = V4L2_MEMORY_MMAP;             //\u7f13\u51b2\u533a\u5185\u5b58\u7c7b\u578b\r\n    if (ioctl(fd, VIDIOC_REQBUFS, &req) < 0) {\r\n\t\tprintf("> VIDIOC_REQBUFS failed\\n");\r\n\t\tclose(fd);\r\n\t\treturn -1;\r\n\t}else{\r\n        printf("> request buffer sccessfully!\\n");\r\n    }\r\n\r\n    int buf_count = req.count;\r\n    printf("> buf_count is : %d\\n",buf_count);\r\n    \r\n    \r\n    /*map kernel buffer*/\r\n    struct buffer *buffers = calloc(buf_count,sizeof(struct buffer));\r\n\r\n    for(i = 0; i < buf_count; i++)\r\n    {\r\n        buf.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n        buf.index  = i;\r\n        buf.memory = V4L2_MEMORY_MMAP;\r\n\r\n        if(ioctl(fd, VIDIOC_QUERYBUF, &buf) == -1)\r\n        {\r\n            printf("> VIDIOC_QUERYBUF error\\n");\r\n            free(buffers);\r\n            close(fd);\r\n\r\n            return -1;\r\n        }\r\n\r\n        buffers[i].length[0] = buf.length;\r\n        buffers[i].start[0]  = (unsigned char *)mmap(NULL ,buf.length ,PROT_READ | PROT_WRITE ,MAP_SHARED ,fd ,buf.m.offset);\r\n        printf("> map buffer index: %d, mem: %p, len: %x, offset: %x\\n", \\\r\n\t\t\t\t\ti, buffers[i].start[0], buf.length, buf.m.offset); \r\n\r\n        if(ioctl(fd,VIDIOC_QBUF,&buf) < 0)\r\n        {\r\n            printf("> Failed to queue buf\\n");\r\n        } \r\n    }\r\n    \r\n    /*capture screenshot*/\r\n    type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n\t\r\n    /*1.VIDIOC_STREAMON*/\r\n    if (ioctl(fd, VIDIOC_STREAMON, &type) == -1) {\r\n\t\tprintf("> VIDIOC_STREAMON error! %s\\n", strerror(errno));\r\n\t\tgoto EXIT;\r\n\t} else\r\n\t\tprintf(" stream on succeed\\n");\r\n\r\n    gettimeofday(&tv, NULL);\r\n    long long streamon_time = secs_to_msecs(tv.tv_sec, tv.tv_usec);\r\n    memset(&buf, 0, sizeof(struct v4l2_buffer));\r\n    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n    buf.memory = V4L2_MEMORY_MMAP;\r\n\r\n    int np  = 0;\r\n    int ret = 0;\r\n    long long timestamp_now, timestamp_save;\r\n    char bmp_data_path[128];\r\n    fd_set fds;\r\n\r\n    while(np < 5)\r\n    {\r\n        printf("> camera%d capture num is [%d]\\n", 1, np);\r\n        tv.tv_sec = 2;\r\n\t\ttv.tv_usec = 0;\r\n\r\n        FD_ZERO(&fds);\r\n\t\tFD_SET(fd, &fds);\r\n\t\tret = select(fd + 1, &fds, NULL, NULL, &tv);\r\n\t\tif (ret == -1) {\r\n\t\t\tprintf("> select error\\n");\r\n\t\t\tcontinue;\r\n\t\t} else if (ret == 0) {\r\n\t\t\tprintf("> camera%d select timeout,end capture thread!\\n", np);\r\n\t\t\tret = -1;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t/*2.VIDIOC_DQBUF*/\r\n        ret = ioctl(fd, VIDIOC_DQBUF, &buf);\r\n\t\tif (ret == 0)\r\n\t\t\tprintf("*****DQBUF[%d] FINISH*****\\n", buf.index);\r\n\t\telse\r\n\t\t\tprintf("****DQBUF FAIL*****\\n");\r\n        \r\n        gettimeofday(&tv, NULL);\r\n\t\ttimestamp_now = secs_to_msecs(tv.tv_sec, tv.tv_usec);\r\n\t\tif (np == 0) {\r\n\t\t\tprintf("> the time interval from the start to the first frame is %lld ms\\n", timestamp_now - streamon_time);\r\n\t\t\ttimestamp_save = timestamp_now;\r\n\t\t}\r\n\t\tprintf("> the interval of two frames is %lld ms\\n", timestamp_now - timestamp_save);\r\n\t\ttimestamp_save = timestamp_now;\r\n\r\n        sprintf(bmp_data_path, "%s/bmp_%s_%d.bmp", "/mnt/UDISK", "NV21", np + 1);\r\n        printf("> buf.index = %d\\n",buf.index);\r\n        YUVToBMP(bmp_data_path,buffers[buf.index].start[0],NV21ToRGB24,width,height);\r\n\r\n        /*3.VIDIOC_QBUF*/\r\n\t\tif (ioctl(fd, VIDIOC_QBUF, &buf) == 0)\r\n\t\t\tprintf("************QBUF[%d] FINISH**************\\n", buf.index);\r\n\t\telse\r\n\t\t\tprintf("*****QBUF FAIL*****\\n");\r\n\r\n        np++;\r\n    }\r\n    \r\n\t/*4.VIDIOC_STREAMOFF*/\r\n    type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\r\n\tif (ioctl(fd, VIDIOC_STREAMOFF, &type) == -1)\r\n\t\tprintf("> VIDIOC_STREAMOFF error! %s\\n", strerror(errno));\r\n\r\n\r\nEXIT:    \r\n    for (i = 0; i < buf_count; i++) {\r\n\t\tif (munmap(buffers[i].start[0], buffers[i].length[0]) == -1) {\r\n\t\t\tprintf("> munmap error\\n");\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    close(fd);\r\n    printf("> closed /dev/video4\\n");\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(r.p,{children:"\u4e0a\u9762\u4e00\u5171\u6293\u53d65\u5f20\u56fe\u7247\uff0c\u56fe\u7247\u4fdd\u5b58\u5728/mnt/UDISK/\uff0c\u8fd8\u52a0\u5165\u4e86\u6293\u53d6\u4e00\u5f20\u56fe\u7247\u9700\u8981\u591a\u5c11\u65f6\u95f4\u7684\u529f\u80fd\uff0c\u5e76\u4e14\u628aYUV\u683c\u5f0f\u7684\u6570\u636e\u8f6c\u6362\u4e3aBMP\u56fe\u50cf\u7b49\u5904\u7406\uff0c\u5177\u4f53\u4ee3\u7801\u67e5\u770b\u6e90\u7801\u3002"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"> index=0\r\n> flags=0\r\n> discription=Y/CbCr 4:2:0\r\n> pixelformat=NV12\r\n> reserved=0\r\n> index=1\r\n> flags=0\r\n> discription=Y/CrCb 4:2:0\r\n> pixelformat=NV21\r\n> reserved=0\r\n> index=2\r\n> flags=0\r\n> discription=Y/CbCr 4:2:2\r\n> pixelformat=NV16\r\n> reserved=0\r\n> index=3\r\n> flags=0\r\n> discription=Y/CrCb 4:2:2\r\n> pixelformat=NV61\r\n> reserved=0\r\n> index=4\r\n> flags=0\r\n> discription=planar PACK\r\n> pixelformat=\r\n> reserved=0\r\n fmtdesc error: Invalid argument\r\n> Querey device capabilities succeed\r\n> cap.driver=sunxi-tvd\r\n> cap.card=sunxi-tvd\r\n> cap.bus_info=tvd_v4l2_dev0\r\n> cap.version=0x00010000\r\n> cap.capabilities=0x85200001\r\n> The device is supports the Video Capture interface V4L2_CAP_VIDEO_CAPTURE!!!\r\n> select the current video input successfully!\r\n> VIDIOC_S_FMT succeed\r\n> fmt.type = 1\r\n> fmt.fmt.pix.width = 720\r\n> fmt.fmt.pix.height = 480\r\n> fmt.fmt.pix.field = 1\r\n> The pixel format fourcc is: NV21\r\n> request buffer sccessfully!\r\n> buf_count is : 3\r\n> map buffer index: 0, mem: 0xb6e0b000, len: 7e900, offset: 0\r\n> map buffer index: 1, mem: 0xb6d8c000, len: 7e900, offset: 7f000\r\n> map buffer index: 2, mem: 0xb6d0d000, len: 7e900, offset: fe000\r\n stream on succeed\r\n> camera1 capture num is [0]\r\n*****DQBUF[0] FINISH*****\r\n> the time interval from the start to the first frame is 76 ms\r\n> the interval of two frames is 0 ms\r\n> buf.index = 0\r\n************QBUF[0] FINISH**************\r\n> camera1 capture num is [1]\r\n*****DQBUF[1] FINISH*****\r\n> the interval of two frames is 390 ms\r\n> buf.index = 1\r\n************QBUF[1] FINISH**************\r\n> camera1 capture num is [2]\r\n*****DQBUF[2] FINISH*****\r\n> the interval of two frames is 390 ms\r\n> buf.index = 2\r\n************QBUF[2] FINISH**************\r\n> camera1 capture num is [3]\r\n*****DQBUF[0] FINISH*****\r\n> the interval of two frames is 389 ms\r\n> buf.index = 0\r\n************QBUF[0] FINISH**************\r\n> camera1 capture num is [4]\r\n*****DQBUF[1] FINISH*****\r\n> the interval of two frames is 390 ms\r\n> buf.index = 1\r\n************QBUF[1] FINISH**************\r\n> closed /dev/video4\n"})}),"\n",(0,t.jsx)(r.h2,{id:"\u6e90\u7801\u4f7f\u7528\u65b9\u6cd5",children:"\u6e90\u7801\u4f7f\u7528\u65b9\u6cd5"}),"\n",(0,t.jsx)(r.p,{children:"\u4ee5\u4e0a\uff0c\u8bb2\u89e3\u4e86\u6293\u56fe\u7684\u6d41\u7a0b\uff0c\u53ea\u8981\u4f60\u7684\u6444\u50cf\u5934\u9002\u914d\u4e86v4l2\u9a71\u52a8\u6846\u67b6\uff0c\u4e0a\u9762\u7684\u6d41\u7a0b\u57fa\u672c\u90fd\u9002\u7528\u3002\u4e0b\u9762\u5c06\u8bb2\u89e3\u5982\u4f55\u83b7\u53d6\u672c\u6b21\u4f8b\u7a0b\u7684\u6e90\u7801\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u8fdb\u5165Ubuntu\uff0c\u83b7\u53d6\u8d44\u6e90\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"git clone https://e.coding.net/weidongshan/tina5/APP-DevExample.git\n"})}),"\n",(0,t.jsxs)(r.p,{children:["\u4e0b\u8f7d\u7684\u8d44\u6e90\u91cc\u9762\uff0c\u6e90\u7801\u5728\u6587\u4ef6\u5939 ",(0,t.jsx)(r.code,{children:"V4L2/camera_capture_demo_v1"}),"\u3002"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"ubuntu@dshanpi:~/meihao/APP-DevExample/V4L2/camera_capture_demo_v1$ tree\r\n.\r\n\u251c\u2500\u2500 build.sh\r\n\u251c\u2500\u2500 cameratest\r\n\u251c\u2500\u2500 cameratest.c\r\n\u251c\u2500\u2500 convert.c\r\n\u251c\u2500\u2500 convert.h\r\n\u2514\u2500\u2500 README.md\r\n\r\n0 directories, 6 files\n"})}),"\n",(0,t.jsxs)(r.p,{children:["\u8fd9\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684",(0,t.jsx)(r.code,{children:"README.md"})," \u91cc\u9762\u6709\u8bb2\u89e3\u600e\u4e48\u53bb\u7f16\u8bd1\u3002\u63a5\u4e0b\u6765\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528\u8fd9\u4e2a ",(0,t.jsx)(r.code,{children:"cameratest"})," \u5e94\u7528\u7a0b\u5e8f\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\u3002"]}),"\n",(0,t.jsxs)(r.p,{children:["\u628a ",(0,t.jsx)(r.code,{children:"cameratest"})," \u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 ADB \u5de5\u5177\u4e0a\u4f20\u5230\u5f00\u53d1\u677f\u7684 ",(0,t.jsx)(r.code,{children:"/mnt/UDISK/"})," \u76ee\u5f55\u4e0b\uff0c"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"adb push cameratest /mnt/UDISK/\n"})}),"\n",(0,t.jsxs)(r.p,{children:["\u767b\u5f55\u5f00\u53d1\u677f\u3002\u5982\u679c\u4e0d\u6e05\u695a\u600e\u4e48\u53bb\u767b\u5f55\u5f00\u53d1\u677f\u7ec8\u7aef\uff0c\u8bf7\u53c2\u8003\uff1a",(0,t.jsx)(r.a,{href:"https://dshanpi.100ask.org/docs/T113i-Industrial/part1/QuickStart#%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F",children:"\u542f\u52a8\u5f00\u53d1\u677f | \u4e1c\u5c71\u03a0 (100ask.org)"})]}),"\n",(0,t.jsx)(r.p,{children:"\u5728\u5f00\u53d1\u677f\u7ec8\u7aef\u4e0a\uff0c\u6267\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"/mnt/UDSIK/cameratest\n"})}),"\n",(0,t.jsx)(r.p,{children:"\u8fd9\u4e2a\u7a0b\u5e8f\u9ed8\u8ba4\u6293\u53d65\u5f20\u56fe\u7247\uff08\u5982\u679c\u9700\u8981\u4fee\u6539\u6293\u56fe\u6570\u91cf\uff0c\u6839\u636e\u4e0a\u9762\u4ee3\u7801\u4fee\u6539\uff09\uff0c\u56fe\u7247\u4fdd\u5b58\u7684\u8def\u5f84\u662f/mnt/UDISK/"}),"\n",(0,t.jsxs)(r.p,{children:["\u67e5\u770b\u56fe\u7247\u5982\u4e0b\uff0c\u5982\u679c\u4e0d\u6e05\u695a\u5982\u4f55\u67e5\u770b\u56fe\u7247\uff0c\u8bf7\u53c2\u8003\uff1a",(0,t.jsx)(r.a,{href:"https://dshanpi.100ask.org/docs/T113i-Industrial/part2/CVBSCameraCapture#%E6%9F%A5%E7%9C%8B%E5%9B%BE%E7%89%87",children:"CVBS\u6444\u50cf\u5934\u6293\u56fe | \u4e1c\u5c71\u03a0 (100ask.org)"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"image-20240828104526366",src:e(47880).Z+"",width:"720",height:"480"})})]})}function a(n={}){const{wrapper:r}={...(0,i.a)(),...n.components};return r?(0,t.jsx)(r,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},54618:(n,r,e)=>{e.d(r,{Z:()=>t});const t=e.p+"assets/images/image-20240826145850627-219fd49cc58971109c9257e1e9f32283.png"},74154:(n,r,e)=>{e.d(r,{Z:()=>t});const t=e.p+"assets/images/image-20240826152237248-f23a0d3260486cc3cec109185c486b19.png"},47880:(n,r,e)=>{e.d(r,{Z:()=>t});const t=e.p+"assets/images/image-20240828104526366-7786b431a89464d4fb230481151ed01c.png"},44905:(n,r,e)=>{e.d(r,{Z:()=>t});const t=e.p+"assets/images/image-20240902112628995-3955af65a616a12a1ed3b5cf83239b75.png"},11151:(n,r,e)=>{e.d(r,{Z:()=>d,a:()=>c});var t=e(67294);const i={},s=t.createContext(i);function c(n){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function d(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:c(n.components),t.createElement(s.Provider,{value:r},n.children)}}}]);